// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#include "Struct.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR BuffData::BuffData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.victims_)*/{}
  , /*decltype(_impl_._victims_cached_byte_size_)*/{0}
  , /*decltype(_impl_.buffid_)*/uint64_t{0u}
  , /*decltype(_impl_.remaintime_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BuffDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuffDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuffDataDefaultTypeInternal() {}
  union {
    BuffData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuffDataDefaultTypeInternal _BuffData_default_instance_;
PROTOBUF_CONSTEXPR ObjectInfo::ObjectInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.objectid_)*/uint64_t{0u}
  , /*decltype(_impl_.objecttype_)*/0
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.dir_)*/0
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.maxhp_)*/0
  , /*decltype(_impl_.attack_)*/0
  , /*decltype(_impl_.defence_)*/0
  , /*decltype(_impl_.posx_)*/0
  , /*decltype(_impl_.posy_)*/0
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_.gold_)*/uint64_t{0u}
  , /*decltype(_impl_.weapontype_)*/0
  , /*decltype(_impl_.itemtype_)*/0
  , /*decltype(_impl_.arrows_)*/0
  , /*decltype(_impl_.mp_)*/0
  , /*decltype(_impl_.maxmp_)*/0
  , /*decltype(_impl_.npctype_)*/0
  , /*decltype(_impl_.potion_)*/0
  , /*decltype(_impl_.monstertype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectInfoDefaultTypeInternal() {}
  union {
    ObjectInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectInfoDefaultTypeInternal _ObjectInfo_default_instance_;
PROTOBUF_CONSTEXPR Text::Text(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.objectid_)*/uint64_t{0u}
  , /*decltype(_impl_.time_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextDefaultTypeInternal() {}
  union {
    Text _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextDefaultTypeInternal _Text_default_instance_;
PROTOBUF_CONSTEXPR QuestInfo::QuestInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objectid_)*/uint64_t{0u}
  , /*decltype(_impl_.questid_)*/0
  , /*decltype(_impl_.targetid_)*/0
  , /*decltype(_impl_.targettype_)*/0
  , /*decltype(_impl_.targetnums_)*/0
  , /*decltype(_impl_.process_)*/0
  , /*decltype(_impl_.queststate_)*/0
  , /*decltype(_impl_.rewardgold_)*/0
  , /*decltype(_impl_.rewarditem_)*/0
  , /*decltype(_impl_.rewarditemnum_)*/0
  , /*decltype(_impl_.posx_)*/0
  , /*decltype(_impl_.posy_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuestInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuestInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuestInfoDefaultTypeInternal() {}
  union {
    QuestInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuestInfoDefaultTypeInternal _QuestInfo_default_instance_;
PROTOBUF_CONSTEXPR ItemInfo::ItemInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.itemname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.itemid_)*/uint64_t{0u}
  , /*decltype(_impl_.itemcount_)*/uint64_t{0u}
  , /*decltype(_impl_.itemtype_)*/0
  , /*decltype(_impl_.posx_)*/0
  , /*decltype(_impl_.posy_)*/0
  , /*decltype(_impl_.itemsubtype_)*/0
  , /*decltype(_impl_.objectid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemInfoDefaultTypeInternal() {}
  union {
    ItemInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemInfoDefaultTypeInternal _ItemInfo_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Struct_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Struct_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Struct_2eproto = nullptr;

const uint32_t TableStruct_Struct_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::BuffData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::BuffData, _impl_.buffid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::BuffData, _impl_.remaintime_),
  PROTOBUF_FIELD_OFFSET(::Protocol::BuffData, _impl_.victims_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.objecttype_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.dir_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.maxhp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.attack_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.defence_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.posy_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.weapontype_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.gold_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.itemtype_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.arrows_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.mp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.maxmp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.npctype_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.potion_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.monstertype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::Text, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::Text, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Text, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Text, _impl_.str_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::QuestInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::QuestInfo, _impl_.questid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::QuestInfo, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::QuestInfo, _impl_.targetid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::QuestInfo, _impl_.targettype_),
  PROTOBUF_FIELD_OFFSET(::Protocol::QuestInfo, _impl_.targetnums_),
  PROTOBUF_FIELD_OFFSET(::Protocol::QuestInfo, _impl_.process_),
  PROTOBUF_FIELD_OFFSET(::Protocol::QuestInfo, _impl_.queststate_),
  PROTOBUF_FIELD_OFFSET(::Protocol::QuestInfo, _impl_.rewardgold_),
  PROTOBUF_FIELD_OFFSET(::Protocol::QuestInfo, _impl_.rewarditem_),
  PROTOBUF_FIELD_OFFSET(::Protocol::QuestInfo, _impl_.rewarditemnum_),
  PROTOBUF_FIELD_OFFSET(::Protocol::QuestInfo, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::QuestInfo, _impl_.posy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _impl_.itemid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _impl_.itemcount_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _impl_.itemtype_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _impl_.itemname_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _impl_.posy_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _impl_.itemsubtype_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _impl_.objectid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::BuffData)},
  { 9, -1, -1, sizeof(::Protocol::ObjectInfo)},
  { 36, -1, -1, sizeof(::Protocol::Text)},
  { 45, -1, -1, sizeof(::Protocol::QuestInfo)},
  { 63, -1, -1, sizeof(::Protocol::ItemInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_BuffData_default_instance_._instance,
  &::Protocol::_ObjectInfo_default_instance_._instance,
  &::Protocol::_Text_default_instance_._instance,
  &::Protocol::_QuestInfo_default_instance_._instance,
  &::Protocol::_ItemInfo_default_instance_._instance,
};

const char descriptor_table_protodef_Struct_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Struct.proto\022\010Protocol\032\nEnum.proto\"\?\n\010"
  "BuffData\022\016\n\006buffId\030\001 \001(\004\022\022\n\nremainTime\030\002"
  " \001(\002\022\017\n\007victims\030\003 \003(\004\"\371\003\n\nObjectInfo\022\020\n\010"
  "objectId\030\001 \001(\004\022)\n\nobjectType\030\002 \001(\0162\025.Pro"
  "tocol.OBJECT_TYPE\022*\n\005state\030\003 \001(\0162\033.Proto"
  "col.OBJECT_STATE_TYPE\022\037\n\003dir\030\004 \001(\0162\022.Pro"
  "tocol.DIR_TYPE\022\014\n\004name\030\005 \001(\t\022\n\n\002hp\030\006 \001(\005"
  "\022\r\n\005maxHp\030\007 \001(\005\022\016\n\006attack\030\010 \001(\005\022\017\n\007defen"
  "ce\030\t \001(\005\022\014\n\004posX\030\n \001(\005\022\014\n\004posY\030\013 \001(\005\022\016\n\006"
  "damage\030\014 \001(\005\022)\n\nweaponType\030\r \001(\0162\025.Proto"
  "col.WEAPON_TYPE\022\014\n\004gold\030\016 \001(\004\022%\n\010itemTyp"
  "e\030\017 \001(\0162\023.Protocol.ITEM_TYPE\022\016\n\006arrows\030\020"
  " \001(\005\022\n\n\002mp\030\021 \001(\005\022\r\n\005maxMp\030\022 \001(\005\022#\n\007npcTy"
  "pe\030\023 \001(\0162\022.Protocol.NPC_TYPE\022\016\n\006potion\030\024"
  " \001(\005\022+\n\013monsterType\030\025 \001(\0162\026.Protocol.MON"
  "STER_TYPE\"3\n\004Text\022\020\n\010objectId\030\001 \001(\004\022\014\n\004t"
  "ime\030\002 \001(\004\022\013\n\003str\030\003 \001(\t\"\226\002\n\tQuestInfo\022\017\n\007"
  "questid\030\001 \001(\005\022\020\n\010objectid\030\002 \001(\004\022\020\n\010targe"
  "tid\030\003 \001(\005\022)\n\ntargettype\030\004 \001(\0162\025.Protocol"
  ".OBJECT_TYPE\022\022\n\ntargetnums\030\005 \001(\005\022\017\n\007proc"
  "ess\030\006 \001(\005\022)\n\nqueststate\030\007 \001(\0162\025.Protocol"
  ".QUEST_STATE\022\022\n\nrewardGold\030\010 \001(\005\022\022\n\nrewa"
  "rdItem\030\t \001(\005\022\025\n\rrewardItemNum\030\n \001(\005\022\014\n\004p"
  "osX\030\013 \001(\005\022\014\n\004posY\030\014 \001(\005\"\301\001\n\010ItemInfo\022\016\n\006"
  "ItemId\030\001 \001(\004\022\021\n\tItemCount\030\002 \001(\004\022%\n\010itemT"
  "ype\030\003 \001(\0162\023.Protocol.ITEM_TYPE\022\020\n\010ItemNa"
  "me\030\004 \001(\t\022\014\n\004posX\030\005 \001(\005\022\014\n\004posY\030\006 \001(\005\022+\n\013"
  "itemSubType\030\007 \001(\0162\026.Protocol.ITEM_SUBTYP"
  "E\022\020\n\010objectId\030\010 \001(\004b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Struct_2eproto_deps[1] = {
  &::descriptor_table_Enum_2eproto,
};
static ::_pbi::once_flag descriptor_table_Struct_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Struct_2eproto = {
    false, false, 1147, descriptor_table_protodef_Struct_2eproto,
    "Struct.proto",
    &descriptor_table_Struct_2eproto_once, descriptor_table_Struct_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_Struct_2eproto::offsets,
    file_level_metadata_Struct_2eproto, file_level_enum_descriptors_Struct_2eproto,
    file_level_service_descriptors_Struct_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Struct_2eproto_getter() {
  return &descriptor_table_Struct_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Struct_2eproto(&descriptor_table_Struct_2eproto);
namespace Protocol {

// ===================================================================

class BuffData::_Internal {
 public:
};

BuffData::BuffData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.BuffData)
}
BuffData::BuffData(const BuffData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BuffData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.victims_){from._impl_.victims_}
    , /*decltype(_impl_._victims_cached_byte_size_)*/{0}
    , decltype(_impl_.buffid_){}
    , decltype(_impl_.remaintime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.buffid_, &from._impl_.buffid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.remaintime_) -
    reinterpret_cast<char*>(&_impl_.buffid_)) + sizeof(_impl_.remaintime_));
  // @@protoc_insertion_point(copy_constructor:Protocol.BuffData)
}

inline void BuffData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.victims_){arena}
    , /*decltype(_impl_._victims_cached_byte_size_)*/{0}
    , decltype(_impl_.buffid_){uint64_t{0u}}
    , decltype(_impl_.remaintime_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BuffData::~BuffData() {
  // @@protoc_insertion_point(destructor:Protocol.BuffData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuffData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.victims_.~RepeatedField();
}

void BuffData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuffData::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.BuffData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.victims_.Clear();
  ::memset(&_impl_.buffid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.remaintime_) -
      reinterpret_cast<char*>(&_impl_.buffid_)) + sizeof(_impl_.remaintime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuffData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 buffId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.buffid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float remainTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.remaintime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 victims = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_victims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_victims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuffData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.BuffData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 buffId = 1;
  if (this->_internal_buffid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_buffid(), target);
  }

  // float remainTime = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_remaintime = this->_internal_remaintime();
  uint32_t raw_remaintime;
  memcpy(&raw_remaintime, &tmp_remaintime, sizeof(tmp_remaintime));
  if (raw_remaintime != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_remaintime(), target);
  }

  // repeated uint64 victims = 3;
  {
    int byte_size = _impl_._victims_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_victims(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.BuffData)
  return target;
}

size_t BuffData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.BuffData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 victims = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.victims_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._victims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 buffId = 1;
  if (this->_internal_buffid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_buffid());
  }

  // float remainTime = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_remaintime = this->_internal_remaintime();
  uint32_t raw_remaintime;
  memcpy(&raw_remaintime, &tmp_remaintime, sizeof(tmp_remaintime));
  if (raw_remaintime != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuffData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BuffData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuffData::GetClassData() const { return &_class_data_; }


void BuffData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BuffData*>(&to_msg);
  auto& from = static_cast<const BuffData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.BuffData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.victims_.MergeFrom(from._impl_.victims_);
  if (from._internal_buffid() != 0) {
    _this->_internal_set_buffid(from._internal_buffid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_remaintime = from._internal_remaintime();
  uint32_t raw_remaintime;
  memcpy(&raw_remaintime, &tmp_remaintime, sizeof(tmp_remaintime));
  if (raw_remaintime != 0) {
    _this->_internal_set_remaintime(from._internal_remaintime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuffData::CopyFrom(const BuffData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.BuffData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffData::IsInitialized() const {
  return true;
}

void BuffData::InternalSwap(BuffData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.victims_.InternalSwap(&other->_impl_.victims_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuffData, _impl_.remaintime_)
      + sizeof(BuffData::_impl_.remaintime_)
      - PROTOBUF_FIELD_OFFSET(BuffData, _impl_.buffid_)>(
          reinterpret_cast<char*>(&_impl_.buffid_),
          reinterpret_cast<char*>(&other->_impl_.buffid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuffData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[0]);
}

// ===================================================================

class ObjectInfo::_Internal {
 public:
};

ObjectInfo::ObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.ObjectInfo)
}
ObjectInfo::ObjectInfo(const ObjectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.objectid_){}
    , decltype(_impl_.objecttype_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.dir_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.maxhp_){}
    , decltype(_impl_.attack_){}
    , decltype(_impl_.defence_){}
    , decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.gold_){}
    , decltype(_impl_.weapontype_){}
    , decltype(_impl_.itemtype_){}
    , decltype(_impl_.arrows_){}
    , decltype(_impl_.mp_){}
    , decltype(_impl_.maxmp_){}
    , decltype(_impl_.npctype_){}
    , decltype(_impl_.potion_){}
    , decltype(_impl_.monstertype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.objectid_, &from._impl_.objectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.monstertype_) -
    reinterpret_cast<char*>(&_impl_.objectid_)) + sizeof(_impl_.monstertype_));
  // @@protoc_insertion_point(copy_constructor:Protocol.ObjectInfo)
}

inline void ObjectInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.objectid_){uint64_t{0u}}
    , decltype(_impl_.objecttype_){0}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.dir_){0}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.maxhp_){0}
    , decltype(_impl_.attack_){0}
    , decltype(_impl_.defence_){0}
    , decltype(_impl_.posx_){0}
    , decltype(_impl_.posy_){0}
    , decltype(_impl_.damage_){0}
    , decltype(_impl_.gold_){uint64_t{0u}}
    , decltype(_impl_.weapontype_){0}
    , decltype(_impl_.itemtype_){0}
    , decltype(_impl_.arrows_){0}
    , decltype(_impl_.mp_){0}
    , decltype(_impl_.maxmp_){0}
    , decltype(_impl_.npctype_){0}
    , decltype(_impl_.potion_){0}
    , decltype(_impl_.monstertype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ObjectInfo::~ObjectInfo() {
  // @@protoc_insertion_point(destructor:Protocol.ObjectInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void ObjectInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.ObjectInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.objectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.monstertype_) -
      reinterpret_cast<char*>(&_impl_.objectid_)) + sizeof(_impl_.monstertype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.OBJECT_TYPE objectType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_objecttype(static_cast<::Protocol::OBJECT_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.OBJECT_STATE_TYPE state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::Protocol::OBJECT_STATE_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.DIR_TYPE dir = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dir(static_cast<::Protocol::DIR_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.ObjectInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 hp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 maxHp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 attack = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.attack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 defence = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.defence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 posX = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 posY = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 damage = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.WEAPON_TYPE weaponType = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_weapontype(static_cast<::Protocol::WEAPON_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 gold = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ITEM_TYPE itemType = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_itemtype(static_cast<::Protocol::ITEM_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 arrows = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.arrows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mp = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 maxMp = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.maxmp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.NPC_TYPE npcType = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_npctype(static_cast<::Protocol::NPC_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 potion = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.potion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.MONSTER_TYPE monsterType = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_monstertype(static_cast<::Protocol::MONSTER_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.ObjectInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 objectId = 1;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_objectid(), target);
  }

  // .Protocol.OBJECT_TYPE objectType = 2;
  if (this->_internal_objecttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_objecttype(), target);
  }

  // .Protocol.OBJECT_STATE_TYPE state = 3;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // .Protocol.DIR_TYPE dir = 4;
  if (this->_internal_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_dir(), target);
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.ObjectInfo.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // int32 hp = 6;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_hp(), target);
  }

  // int32 maxHp = 7;
  if (this->_internal_maxhp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_maxhp(), target);
  }

  // int32 attack = 8;
  if (this->_internal_attack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_attack(), target);
  }

  // int32 defence = 9;
  if (this->_internal_defence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_defence(), target);
  }

  // int32 posX = 10;
  if (this->_internal_posx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_posx(), target);
  }

  // int32 posY = 11;
  if (this->_internal_posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_posy(), target);
  }

  // int32 damage = 12;
  if (this->_internal_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_damage(), target);
  }

  // .Protocol.WEAPON_TYPE weaponType = 13;
  if (this->_internal_weapontype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_weapontype(), target);
  }

  // uint64 gold = 14;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_gold(), target);
  }

  // .Protocol.ITEM_TYPE itemType = 15;
  if (this->_internal_itemtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_itemtype(), target);
  }

  // int32 arrows = 16;
  if (this->_internal_arrows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_arrows(), target);
  }

  // int32 mp = 17;
  if (this->_internal_mp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_mp(), target);
  }

  // int32 maxMp = 18;
  if (this->_internal_maxmp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_maxmp(), target);
  }

  // .Protocol.NPC_TYPE npcType = 19;
  if (this->_internal_npctype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      19, this->_internal_npctype(), target);
  }

  // int32 potion = 20;
  if (this->_internal_potion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_potion(), target);
  }

  // .Protocol.MONSTER_TYPE monsterType = 21;
  if (this->_internal_monstertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      21, this->_internal_monstertype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.ObjectInfo)
  return target;
}

size_t ObjectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.ObjectInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 5;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 objectId = 1;
  if (this->_internal_objectid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_objectid());
  }

  // .Protocol.OBJECT_TYPE objectType = 2;
  if (this->_internal_objecttype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_objecttype());
  }

  // .Protocol.OBJECT_STATE_TYPE state = 3;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .Protocol.DIR_TYPE dir = 4;
  if (this->_internal_dir() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dir());
  }

  // int32 hp = 6;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  // int32 maxHp = 7;
  if (this->_internal_maxhp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maxhp());
  }

  // int32 attack = 8;
  if (this->_internal_attack() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_attack());
  }

  // int32 defence = 9;
  if (this->_internal_defence() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_defence());
  }

  // int32 posX = 10;
  if (this->_internal_posx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_posx());
  }

  // int32 posY = 11;
  if (this->_internal_posy() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_posy());
  }

  // int32 damage = 12;
  if (this->_internal_damage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_damage());
  }

  // uint64 gold = 14;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gold());
  }

  // .Protocol.WEAPON_TYPE weaponType = 13;
  if (this->_internal_weapontype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_weapontype());
  }

  // .Protocol.ITEM_TYPE itemType = 15;
  if (this->_internal_itemtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_itemtype());
  }

  // int32 arrows = 16;
  if (this->_internal_arrows() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_arrows());
  }

  // int32 mp = 17;
  if (this->_internal_mp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_mp());
  }

  // int32 maxMp = 18;
  if (this->_internal_maxmp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_maxmp());
  }

  // .Protocol.NPC_TYPE npcType = 19;
  if (this->_internal_npctype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_npctype());
  }

  // int32 potion = 20;
  if (this->_internal_potion() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_potion());
  }

  // .Protocol.MONSTER_TYPE monsterType = 21;
  if (this->_internal_monstertype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_monstertype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectInfo::GetClassData() const { return &_class_data_; }


void ObjectInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectInfo*>(&to_msg);
  auto& from = static_cast<const ObjectInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.ObjectInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_objectid() != 0) {
    _this->_internal_set_objectid(from._internal_objectid());
  }
  if (from._internal_objecttype() != 0) {
    _this->_internal_set_objecttype(from._internal_objecttype());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_dir() != 0) {
    _this->_internal_set_dir(from._internal_dir());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  if (from._internal_maxhp() != 0) {
    _this->_internal_set_maxhp(from._internal_maxhp());
  }
  if (from._internal_attack() != 0) {
    _this->_internal_set_attack(from._internal_attack());
  }
  if (from._internal_defence() != 0) {
    _this->_internal_set_defence(from._internal_defence());
  }
  if (from._internal_posx() != 0) {
    _this->_internal_set_posx(from._internal_posx());
  }
  if (from._internal_posy() != 0) {
    _this->_internal_set_posy(from._internal_posy());
  }
  if (from._internal_damage() != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  if (from._internal_weapontype() != 0) {
    _this->_internal_set_weapontype(from._internal_weapontype());
  }
  if (from._internal_itemtype() != 0) {
    _this->_internal_set_itemtype(from._internal_itemtype());
  }
  if (from._internal_arrows() != 0) {
    _this->_internal_set_arrows(from._internal_arrows());
  }
  if (from._internal_mp() != 0) {
    _this->_internal_set_mp(from._internal_mp());
  }
  if (from._internal_maxmp() != 0) {
    _this->_internal_set_maxmp(from._internal_maxmp());
  }
  if (from._internal_npctype() != 0) {
    _this->_internal_set_npctype(from._internal_npctype());
  }
  if (from._internal_potion() != 0) {
    _this->_internal_set_potion(from._internal_potion());
  }
  if (from._internal_monstertype() != 0) {
    _this->_internal_set_monstertype(from._internal_monstertype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectInfo::CopyFrom(const ObjectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.ObjectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectInfo::IsInitialized() const {
  return true;
}

void ObjectInfo::InternalSwap(ObjectInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectInfo, _impl_.monstertype_)
      + sizeof(ObjectInfo::_impl_.monstertype_)
      - PROTOBUF_FIELD_OFFSET(ObjectInfo, _impl_.objectid_)>(
          reinterpret_cast<char*>(&_impl_.objectid_),
          reinterpret_cast<char*>(&other->_impl_.objectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[1]);
}

// ===================================================================

class Text::_Internal {
 public:
};

Text::Text(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.Text)
}
Text::Text(const Text& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Text* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.str_){}
    , decltype(_impl_.objectid_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_str().empty()) {
    _this->_impl_.str_.Set(from._internal_str(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.objectid_, &from._impl_.objectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_) -
    reinterpret_cast<char*>(&_impl_.objectid_)) + sizeof(_impl_.time_));
  // @@protoc_insertion_point(copy_constructor:Protocol.Text)
}

inline void Text::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.str_){}
    , decltype(_impl_.objectid_){uint64_t{0u}}
    , decltype(_impl_.time_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Text::~Text() {
  // @@protoc_insertion_point(destructor:Protocol.Text)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Text::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.str_.Destroy();
}

void Text::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Text::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Text)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.str_.ClearToEmpty();
  ::memset(&_impl_.objectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_) -
      reinterpret_cast<char*>(&_impl_.objectid_)) + sizeof(_impl_.time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Text::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string str = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.Text.str"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Text::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Text)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 objectId = 1;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_objectid(), target);
  }

  // uint64 time = 2;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_time(), target);
  }

  // string str = 3;
  if (!this->_internal_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.Text.str");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Text)
  return target;
}

size_t Text::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Text)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string str = 3;
  if (!this->_internal_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str());
  }

  // uint64 objectId = 1;
  if (this->_internal_objectid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_objectid());
  }

  // uint64 time = 2;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Text::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Text::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Text::GetClassData() const { return &_class_data_; }


void Text::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Text*>(&to_msg);
  auto& from = static_cast<const Text&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Text)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_str().empty()) {
    _this->_internal_set_str(from._internal_str());
  }
  if (from._internal_objectid() != 0) {
    _this->_internal_set_objectid(from._internal_objectid());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Text::CopyFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text::IsInitialized() const {
  return true;
}

void Text::InternalSwap(Text* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.str_, lhs_arena,
      &other->_impl_.str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Text, _impl_.time_)
      + sizeof(Text::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(Text, _impl_.objectid_)>(
          reinterpret_cast<char*>(&_impl_.objectid_),
          reinterpret_cast<char*>(&other->_impl_.objectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Text::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[2]);
}

// ===================================================================

class QuestInfo::_Internal {
 public:
};

QuestInfo::QuestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.QuestInfo)
}
QuestInfo::QuestInfo(const QuestInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuestInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objectid_){}
    , decltype(_impl_.questid_){}
    , decltype(_impl_.targetid_){}
    , decltype(_impl_.targettype_){}
    , decltype(_impl_.targetnums_){}
    , decltype(_impl_.process_){}
    , decltype(_impl_.queststate_){}
    , decltype(_impl_.rewardgold_){}
    , decltype(_impl_.rewarditem_){}
    , decltype(_impl_.rewarditemnum_){}
    , decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.objectid_, &from._impl_.objectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.posy_) -
    reinterpret_cast<char*>(&_impl_.objectid_)) + sizeof(_impl_.posy_));
  // @@protoc_insertion_point(copy_constructor:Protocol.QuestInfo)
}

inline void QuestInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objectid_){uint64_t{0u}}
    , decltype(_impl_.questid_){0}
    , decltype(_impl_.targetid_){0}
    , decltype(_impl_.targettype_){0}
    , decltype(_impl_.targetnums_){0}
    , decltype(_impl_.process_){0}
    , decltype(_impl_.queststate_){0}
    , decltype(_impl_.rewardgold_){0}
    , decltype(_impl_.rewarditem_){0}
    , decltype(_impl_.rewarditemnum_){0}
    , decltype(_impl_.posx_){0}
    , decltype(_impl_.posy_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QuestInfo::~QuestInfo() {
  // @@protoc_insertion_point(destructor:Protocol.QuestInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuestInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QuestInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuestInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.QuestInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.objectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.posy_) -
      reinterpret_cast<char*>(&_impl_.objectid_)) + sizeof(_impl_.posy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuestInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 questid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.questid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 objectid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 targetid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.OBJECT_TYPE targettype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_targettype(static_cast<::Protocol::OBJECT_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 targetnums = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.targetnums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 process = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.process_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.QUEST_STATE queststate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_queststate(static_cast<::Protocol::QUEST_STATE>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 rewardGold = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.rewardgold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rewardItem = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.rewarditem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rewardItemNum = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.rewarditemnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 posX = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 posY = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuestInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.QuestInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 questid = 1;
  if (this->_internal_questid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_questid(), target);
  }

  // uint64 objectid = 2;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_objectid(), target);
  }

  // int32 targetid = 3;
  if (this->_internal_targetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_targetid(), target);
  }

  // .Protocol.OBJECT_TYPE targettype = 4;
  if (this->_internal_targettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_targettype(), target);
  }

  // int32 targetnums = 5;
  if (this->_internal_targetnums() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_targetnums(), target);
  }

  // int32 process = 6;
  if (this->_internal_process() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_process(), target);
  }

  // .Protocol.QUEST_STATE queststate = 7;
  if (this->_internal_queststate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_queststate(), target);
  }

  // int32 rewardGold = 8;
  if (this->_internal_rewardgold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_rewardgold(), target);
  }

  // int32 rewardItem = 9;
  if (this->_internal_rewarditem() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_rewarditem(), target);
  }

  // int32 rewardItemNum = 10;
  if (this->_internal_rewarditemnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_rewarditemnum(), target);
  }

  // int32 posX = 11;
  if (this->_internal_posx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_posx(), target);
  }

  // int32 posY = 12;
  if (this->_internal_posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_posy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.QuestInfo)
  return target;
}

size_t QuestInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.QuestInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 objectid = 2;
  if (this->_internal_objectid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_objectid());
  }

  // int32 questid = 1;
  if (this->_internal_questid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_questid());
  }

  // int32 targetid = 3;
  if (this->_internal_targetid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_targetid());
  }

  // .Protocol.OBJECT_TYPE targettype = 4;
  if (this->_internal_targettype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_targettype());
  }

  // int32 targetnums = 5;
  if (this->_internal_targetnums() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_targetnums());
  }

  // int32 process = 6;
  if (this->_internal_process() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_process());
  }

  // .Protocol.QUEST_STATE queststate = 7;
  if (this->_internal_queststate() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_queststate());
  }

  // int32 rewardGold = 8;
  if (this->_internal_rewardgold() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rewardgold());
  }

  // int32 rewardItem = 9;
  if (this->_internal_rewarditem() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rewarditem());
  }

  // int32 rewardItemNum = 10;
  if (this->_internal_rewarditemnum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rewarditemnum());
  }

  // int32 posX = 11;
  if (this->_internal_posx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_posx());
  }

  // int32 posY = 12;
  if (this->_internal_posy() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_posy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuestInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuestInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuestInfo::GetClassData() const { return &_class_data_; }


void QuestInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuestInfo*>(&to_msg);
  auto& from = static_cast<const QuestInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.QuestInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_objectid() != 0) {
    _this->_internal_set_objectid(from._internal_objectid());
  }
  if (from._internal_questid() != 0) {
    _this->_internal_set_questid(from._internal_questid());
  }
  if (from._internal_targetid() != 0) {
    _this->_internal_set_targetid(from._internal_targetid());
  }
  if (from._internal_targettype() != 0) {
    _this->_internal_set_targettype(from._internal_targettype());
  }
  if (from._internal_targetnums() != 0) {
    _this->_internal_set_targetnums(from._internal_targetnums());
  }
  if (from._internal_process() != 0) {
    _this->_internal_set_process(from._internal_process());
  }
  if (from._internal_queststate() != 0) {
    _this->_internal_set_queststate(from._internal_queststate());
  }
  if (from._internal_rewardgold() != 0) {
    _this->_internal_set_rewardgold(from._internal_rewardgold());
  }
  if (from._internal_rewarditem() != 0) {
    _this->_internal_set_rewarditem(from._internal_rewarditem());
  }
  if (from._internal_rewarditemnum() != 0) {
    _this->_internal_set_rewarditemnum(from._internal_rewarditemnum());
  }
  if (from._internal_posx() != 0) {
    _this->_internal_set_posx(from._internal_posx());
  }
  if (from._internal_posy() != 0) {
    _this->_internal_set_posy(from._internal_posy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuestInfo::CopyFrom(const QuestInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.QuestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestInfo::IsInitialized() const {
  return true;
}

void QuestInfo::InternalSwap(QuestInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuestInfo, _impl_.posy_)
      + sizeof(QuestInfo::_impl_.posy_)
      - PROTOBUF_FIELD_OFFSET(QuestInfo, _impl_.objectid_)>(
          reinterpret_cast<char*>(&_impl_.objectid_),
          reinterpret_cast<char*>(&other->_impl_.objectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuestInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[3]);
}

// ===================================================================

class ItemInfo::_Internal {
 public:
};

ItemInfo::ItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.ItemInfo)
}
ItemInfo::ItemInfo(const ItemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ItemInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.itemname_){}
    , decltype(_impl_.itemid_){}
    , decltype(_impl_.itemcount_){}
    , decltype(_impl_.itemtype_){}
    , decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , decltype(_impl_.itemsubtype_){}
    , decltype(_impl_.objectid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.itemname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.itemname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_itemname().empty()) {
    _this->_impl_.itemname_.Set(from._internal_itemname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.itemid_, &from._impl_.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.objectid_) -
    reinterpret_cast<char*>(&_impl_.itemid_)) + sizeof(_impl_.objectid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.ItemInfo)
}

inline void ItemInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.itemname_){}
    , decltype(_impl_.itemid_){uint64_t{0u}}
    , decltype(_impl_.itemcount_){uint64_t{0u}}
    , decltype(_impl_.itemtype_){0}
    , decltype(_impl_.posx_){0}
    , decltype(_impl_.posy_){0}
    , decltype(_impl_.itemsubtype_){0}
    , decltype(_impl_.objectid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.itemname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.itemname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ItemInfo::~ItemInfo() {
  // @@protoc_insertion_point(destructor:Protocol.ItemInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ItemInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.itemname_.Destroy();
}

void ItemInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.ItemInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.itemname_.ClearToEmpty();
  ::memset(&_impl_.itemid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.objectid_) -
      reinterpret_cast<char*>(&_impl_.itemid_)) + sizeof(_impl_.objectid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ItemId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ItemCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.itemcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ITEM_TYPE itemType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_itemtype(static_cast<::Protocol::ITEM_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string ItemName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_itemname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.ItemInfo.ItemName"));
        } else
          goto handle_unusual;
        continue;
      // int32 posX = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 posY = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ITEM_SUBTYPE itemSubType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_itemsubtype(static_cast<::Protocol::ITEM_SUBTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 objectId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.ItemInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ItemId = 1;
  if (this->_internal_itemid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_itemid(), target);
  }

  // uint64 ItemCount = 2;
  if (this->_internal_itemcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_itemcount(), target);
  }

  // .Protocol.ITEM_TYPE itemType = 3;
  if (this->_internal_itemtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_itemtype(), target);
  }

  // string ItemName = 4;
  if (!this->_internal_itemname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_itemname().data(), static_cast<int>(this->_internal_itemname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.ItemInfo.ItemName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_itemname(), target);
  }

  // int32 posX = 5;
  if (this->_internal_posx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_posx(), target);
  }

  // int32 posY = 6;
  if (this->_internal_posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_posy(), target);
  }

  // .Protocol.ITEM_SUBTYPE itemSubType = 7;
  if (this->_internal_itemsubtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_itemsubtype(), target);
  }

  // uint64 objectId = 8;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_objectid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.ItemInfo)
  return target;
}

size_t ItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.ItemInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ItemName = 4;
  if (!this->_internal_itemname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_itemname());
  }

  // uint64 ItemId = 1;
  if (this->_internal_itemid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_itemid());
  }

  // uint64 ItemCount = 2;
  if (this->_internal_itemcount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_itemcount());
  }

  // .Protocol.ITEM_TYPE itemType = 3;
  if (this->_internal_itemtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_itemtype());
  }

  // int32 posX = 5;
  if (this->_internal_posx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_posx());
  }

  // int32 posY = 6;
  if (this->_internal_posy() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_posy());
  }

  // .Protocol.ITEM_SUBTYPE itemSubType = 7;
  if (this->_internal_itemsubtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_itemsubtype());
  }

  // uint64 objectId = 8;
  if (this->_internal_objectid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_objectid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ItemInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemInfo::GetClassData() const { return &_class_data_; }


void ItemInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ItemInfo*>(&to_msg);
  auto& from = static_cast<const ItemInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.ItemInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_itemname().empty()) {
    _this->_internal_set_itemname(from._internal_itemname());
  }
  if (from._internal_itemid() != 0) {
    _this->_internal_set_itemid(from._internal_itemid());
  }
  if (from._internal_itemcount() != 0) {
    _this->_internal_set_itemcount(from._internal_itemcount());
  }
  if (from._internal_itemtype() != 0) {
    _this->_internal_set_itemtype(from._internal_itemtype());
  }
  if (from._internal_posx() != 0) {
    _this->_internal_set_posx(from._internal_posx());
  }
  if (from._internal_posy() != 0) {
    _this->_internal_set_posy(from._internal_posy());
  }
  if (from._internal_itemsubtype() != 0) {
    _this->_internal_set_itemsubtype(from._internal_itemsubtype());
  }
  if (from._internal_objectid() != 0) {
    _this->_internal_set_objectid(from._internal_objectid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.ItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfo::IsInitialized() const {
  return true;
}

void ItemInfo::InternalSwap(ItemInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.itemname_, lhs_arena,
      &other->_impl_.itemname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemInfo, _impl_.objectid_)
      + sizeof(ItemInfo::_impl_.objectid_)
      - PROTOBUF_FIELD_OFFSET(ItemInfo, _impl_.itemid_)>(
          reinterpret_cast<char*>(&_impl_.itemid_),
          reinterpret_cast<char*>(&other->_impl_.itemid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::BuffData*
Arena::CreateMaybeMessage< ::Protocol::BuffData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::BuffData >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::ObjectInfo*
Arena::CreateMaybeMessage< ::Protocol::ObjectInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::ObjectInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::Text*
Arena::CreateMaybeMessage< ::Protocol::Text >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::Text >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::QuestInfo*
Arena::CreateMaybeMessage< ::Protocol::QuestInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::QuestInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::ItemInfo*
Arena::CreateMaybeMessage< ::Protocol::ItemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::ItemInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
