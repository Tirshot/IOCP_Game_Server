// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#include "Enum.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
}  // namespace Protocol
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Enum_2eproto[10];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Enum_2eproto = nullptr;
const uint32_t TableStruct_Enum_2eproto::offsets[1] = {};
static constexpr ::_pbi::MigrationSchema* schemas = nullptr;
static constexpr ::_pb::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_Enum_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nEnum.proto\022\010Protocol*h\n\nPlayerType\022\024\n\020"
  "PLAYER_TYPE_NONE\020\000\022\026\n\022PLAYER_TYPE_KNIGHT"
  "\020\001\022\024\n\020PLAYER_TYPE_MAGE\020\002\022\026\n\022PLAYER_TYPE_"
  "ARCHER\020\003*\320\001\n\013OBJECT_TYPE\022\024\n\020OBJECT_TYPE_"
  "NONE\020\000\022\026\n\022OBJECT_TYPE_PLAYER\020\001\022\027\n\023OBJECT"
  "_TYPE_MONSTER\020\002\022\032\n\026OBJECT_TYPE_PROJECTIL"
  "E\020\003\022\023\n\017OBJECT_TYPE_NPC\020\004\022\030\n\024OBJECT_TYPE_"
  "NPC_SIGN\020\005\022\024\n\020OBJECT_TYPE_ITEM\020\006\022\031\n\025OBJE"
  "CT_TYPE_INVENTORY\020\007*\231\002\n\021OBJECT_STATE_TYP"
  "E\022\032\n\026OBJECT_STATE_TYPE_IDLE\020\000\022\032\n\026OBJECT_"
  "STATE_TYPE_MOVE\020\001\022\033\n\027OBJECT_STATE_TYPE_S"
  "KILL\020\002\022\031\n\025OBJECT_STATE_TYPE_HIT\020\003\022\032\n\026OBJ"
  "ECT_STATE_TYPE_STOP\020\004\022\032\n\026OBJECT_STATE_TY"
  "PE_CHAT\020\005\022 \n\034OBJECT_STATE_TYPE_SPIN_READ"
  "Y\020\006\022\032\n\026OBJECT_STATE_TYPE_SPIN\020\007\022\036\n\032OBJEC"
  "T_STATE_TYPE_TELEPORT\020\010*U\n\010DIR_TYPE\022\017\n\013D"
  "IR_TYPE_UP\020\000\022\021\n\rDIR_TYPE_DOWN\020\001\022\021\n\rDIR_T"
  "YPE_LEFT\020\002\022\022\n\016DIR_TYPE_RIGHT\020\003*P\n\013WEAPON"
  "_TYPE\022\025\n\021WEAPON_TYPE_SWORD\020\000\022\023\n\017WEAPON_T"
  "YPE_BOW\020\001\022\025\n\021WEAPON_TYPE_STAFF\020\002*\325\001\n\tITE"
  "M_TYPE\022\022\n\016ITEM_TYPE_NONE\020\000\022\023\n\017ITEM_TYPE_"
  "HEART\020\001\022\027\n\023ITEM_TYPE_FULLHEART\020\002\022\026\n\022ITEM"
  "_TYPE_MAXHEART\020\003\022\023\n\017ITEM_TYPE_ARROW\020\004\022\024\n"
  "\020ITEM_TYPE_POTION\020\005\022\030\n\024ITEM_TYPE_CONSUMA"
  "BLE\020\013\022\026\n\022ITEM_TYPE_WEARABLE\020\014\022\021\n\rITEM_TY"
  "PE_ETC\020\r*\277\002\n\014ITEM_SUBTYPE\022\030\n\024CONSUMABLE_"
  "TYPE_NONE\020\000\022\031\n\025CONSUMABLE_TYPE_HEART\020\001\022\035"
  "\n\031CONSUMABLE_TYPE_FULLHEART\020\002\022\034\n\030CONSUMA"
  "BLE_TYPE_MAXHEART\020\003\022\031\n\025CONSUMABLE_TYPE_A"
  "RROW\020\004\022\032\n\026CONSUMABLE_TYPE_POTION\020\005\022\030\n\024WE"
  "ARABLE_TYPE_WEAPON\020\006\022\030\n\024WEARABLE_TYPE_HE"
  "LMET\020\007\022\027\n\023WEARABLE_TYPE_ARMOR\020\010\022\027\n\023WEARA"
  "BLE_TYPE_PANTS\020\t\022\027\n\023WEARABLE_TYPE_BOOTS\020"
  "\n\022\007\n\003ETC\020\013*4\n\010NPC_TYPE\022\021\n\rNPC_TYPE_SIGN\020"
  "\000\022\025\n\021NPC_TYPE_MERCHANT\020\001*p\n\013QUEST_STATE\022"
  "\024\n\020QUEST_STATE_IDLE\020\000\022\026\n\022QUEST_STATE_ACC"
  "EPT\020\001\022\031\n\025QUEST_STATE_COMPLETED\020\002\022\030\n\024QUES"
  "T_STATE_FINISHED\020\003*=\n\014MONSTER_TYPE\022\025\n\021MO"
  "NSTER_TYPE_NONE\020\000\022\026\n\022MONSTER_TYPE_SNAKE\020"
  "\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Enum_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Enum_2eproto = {
    false, false, 1569, descriptor_table_protodef_Enum_2eproto,
    "Enum.proto",
    &descriptor_table_Enum_2eproto_once, nullptr, 0, 0,
    schemas, file_default_instances, TableStruct_Enum_2eproto::offsets,
    nullptr, file_level_enum_descriptors_Enum_2eproto,
    file_level_service_descriptors_Enum_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Enum_2eproto_getter() {
  return &descriptor_table_Enum_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Enum_2eproto(&descriptor_table_Enum_2eproto);
namespace Protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[0];
}
bool PlayerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OBJECT_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[1];
}
bool OBJECT_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OBJECT_STATE_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[2];
}
bool OBJECT_STATE_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DIR_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[3];
}
bool DIR_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WEAPON_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[4];
}
bool WEAPON_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ITEM_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[5];
}
bool ITEM_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ITEM_SUBTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[6];
}
bool ITEM_SUBTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NPC_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[7];
}
bool NPC_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QUEST_STATE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[8];
}
bool QUEST_STATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MONSTER_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[9];
}
bool MONSTER_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
