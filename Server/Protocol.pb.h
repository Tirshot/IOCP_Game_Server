// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C_AddItem;
struct C_AddItemDefaultTypeInternal;
extern C_AddItemDefaultTypeInternal _C_AddItem_default_instance_;
class C_EquipItem;
struct C_EquipItemDefaultTypeInternal;
extern C_EquipItemDefaultTypeInternal _C_EquipItem_default_instance_;
class C_Fire;
struct C_FireDefaultTypeInternal;
extern C_FireDefaultTypeInternal _C_Fire_default_instance_;
class C_Heal;
struct C_HealDefaultTypeInternal;
extern C_HealDefaultTypeInternal _C_Heal_default_instance_;
class C_Hit;
struct C_HitDefaultTypeInternal;
extern C_HitDefaultTypeInternal _C_Hit_default_instance_;
class C_LeaveGame;
struct C_LeaveGameDefaultTypeInternal;
extern C_LeaveGameDefaultTypeInternal _C_LeaveGame_default_instance_;
class C_Move;
struct C_MoveDefaultTypeInternal;
extern C_MoveDefaultTypeInternal _C_Move_default_instance_;
class C_Quest;
struct C_QuestDefaultTypeInternal;
extern C_QuestDefaultTypeInternal _C_Quest_default_instance_;
class C_QuestFinish;
struct C_QuestFinishDefaultTypeInternal;
extern C_QuestFinishDefaultTypeInternal _C_QuestFinish_default_instance_;
class C_QuestList;
struct C_QuestListDefaultTypeInternal;
extern C_QuestListDefaultTypeInternal _C_QuestList_default_instance_;
class C_RemoveObject;
struct C_RemoveObjectDefaultTypeInternal;
extern C_RemoveObjectDefaultTypeInternal _C_RemoveObject_default_instance_;
class C_Revive;
struct C_ReviveDefaultTypeInternal;
extern C_ReviveDefaultTypeInternal _C_Revive_default_instance_;
class C_SendMessage;
struct C_SendMessageDefaultTypeInternal;
extern C_SendMessageDefaultTypeInternal _C_SendMessage_default_instance_;
class C_SyncInventory;
struct C_SyncInventoryDefaultTypeInternal;
extern C_SyncInventoryDefaultTypeInternal _C_SyncInventory_default_instance_;
class C_Teleport;
struct C_TeleportDefaultTypeInternal;
extern C_TeleportDefaultTypeInternal _C_Teleport_default_instance_;
class S_AddItem;
struct S_AddItemDefaultTypeInternal;
extern S_AddItemDefaultTypeInternal _S_AddItem_default_instance_;
class S_AddObject;
struct S_AddObjectDefaultTypeInternal;
extern S_AddObjectDefaultTypeInternal _S_AddObject_default_instance_;
class S_EnterGame;
struct S_EnterGameDefaultTypeInternal;
extern S_EnterGameDefaultTypeInternal _S_EnterGame_default_instance_;
class S_EquipItem;
struct S_EquipItemDefaultTypeInternal;
extern S_EquipItemDefaultTypeInternal _S_EquipItem_default_instance_;
class S_Fire;
struct S_FireDefaultTypeInternal;
extern S_FireDefaultTypeInternal _S_Fire_default_instance_;
class S_Gold;
struct S_GoldDefaultTypeInternal;
extern S_GoldDefaultTypeInternal _S_Gold_default_instance_;
class S_Hit;
struct S_HitDefaultTypeInternal;
extern S_HitDefaultTypeInternal _S_Hit_default_instance_;
class S_ItemDrop;
struct S_ItemDropDefaultTypeInternal;
extern S_ItemDropDefaultTypeInternal _S_ItemDrop_default_instance_;
class S_MPRecover;
struct S_MPRecoverDefaultTypeInternal;
extern S_MPRecoverDefaultTypeInternal _S_MPRecover_default_instance_;
class S_Move;
struct S_MoveDefaultTypeInternal;
extern S_MoveDefaultTypeInternal _S_Move_default_instance_;
class S_MyPlayer;
struct S_MyPlayerDefaultTypeInternal;
extern S_MyPlayerDefaultTypeInternal _S_MyPlayer_default_instance_;
class S_Quest;
struct S_QuestDefaultTypeInternal;
extern S_QuestDefaultTypeInternal _S_Quest_default_instance_;
class S_QuestComplete;
struct S_QuestCompleteDefaultTypeInternal;
extern S_QuestCompleteDefaultTypeInternal _S_QuestComplete_default_instance_;
class S_QuestList;
struct S_QuestListDefaultTypeInternal;
extern S_QuestListDefaultTypeInternal _S_QuestList_default_instance_;
class S_QuestProcess;
struct S_QuestProcessDefaultTypeInternal;
extern S_QuestProcessDefaultTypeInternal _S_QuestProcess_default_instance_;
class S_QuestState;
struct S_QuestStateDefaultTypeInternal;
extern S_QuestStateDefaultTypeInternal _S_QuestState_default_instance_;
class S_RemoveObject;
struct S_RemoveObjectDefaultTypeInternal;
extern S_RemoveObjectDefaultTypeInternal _S_RemoveObject_default_instance_;
class S_Reset;
struct S_ResetDefaultTypeInternal;
extern S_ResetDefaultTypeInternal _S_Reset_default_instance_;
class S_SendMessage;
struct S_SendMessageDefaultTypeInternal;
extern S_SendMessageDefaultTypeInternal _S_SendMessage_default_instance_;
class S_TEST;
struct S_TESTDefaultTypeInternal;
extern S_TESTDefaultTypeInternal _S_TEST_default_instance_;
class S_Teleport;
struct S_TeleportDefaultTypeInternal;
extern S_TeleportDefaultTypeInternal _S_Teleport_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_AddItem* Arena::CreateMaybeMessage<::Protocol::C_AddItem>(Arena*);
template<> ::Protocol::C_EquipItem* Arena::CreateMaybeMessage<::Protocol::C_EquipItem>(Arena*);
template<> ::Protocol::C_Fire* Arena::CreateMaybeMessage<::Protocol::C_Fire>(Arena*);
template<> ::Protocol::C_Heal* Arena::CreateMaybeMessage<::Protocol::C_Heal>(Arena*);
template<> ::Protocol::C_Hit* Arena::CreateMaybeMessage<::Protocol::C_Hit>(Arena*);
template<> ::Protocol::C_LeaveGame* Arena::CreateMaybeMessage<::Protocol::C_LeaveGame>(Arena*);
template<> ::Protocol::C_Move* Arena::CreateMaybeMessage<::Protocol::C_Move>(Arena*);
template<> ::Protocol::C_Quest* Arena::CreateMaybeMessage<::Protocol::C_Quest>(Arena*);
template<> ::Protocol::C_QuestFinish* Arena::CreateMaybeMessage<::Protocol::C_QuestFinish>(Arena*);
template<> ::Protocol::C_QuestList* Arena::CreateMaybeMessage<::Protocol::C_QuestList>(Arena*);
template<> ::Protocol::C_RemoveObject* Arena::CreateMaybeMessage<::Protocol::C_RemoveObject>(Arena*);
template<> ::Protocol::C_Revive* Arena::CreateMaybeMessage<::Protocol::C_Revive>(Arena*);
template<> ::Protocol::C_SendMessage* Arena::CreateMaybeMessage<::Protocol::C_SendMessage>(Arena*);
template<> ::Protocol::C_SyncInventory* Arena::CreateMaybeMessage<::Protocol::C_SyncInventory>(Arena*);
template<> ::Protocol::C_Teleport* Arena::CreateMaybeMessage<::Protocol::C_Teleport>(Arena*);
template<> ::Protocol::S_AddItem* Arena::CreateMaybeMessage<::Protocol::S_AddItem>(Arena*);
template<> ::Protocol::S_AddObject* Arena::CreateMaybeMessage<::Protocol::S_AddObject>(Arena*);
template<> ::Protocol::S_EnterGame* Arena::CreateMaybeMessage<::Protocol::S_EnterGame>(Arena*);
template<> ::Protocol::S_EquipItem* Arena::CreateMaybeMessage<::Protocol::S_EquipItem>(Arena*);
template<> ::Protocol::S_Fire* Arena::CreateMaybeMessage<::Protocol::S_Fire>(Arena*);
template<> ::Protocol::S_Gold* Arena::CreateMaybeMessage<::Protocol::S_Gold>(Arena*);
template<> ::Protocol::S_Hit* Arena::CreateMaybeMessage<::Protocol::S_Hit>(Arena*);
template<> ::Protocol::S_ItemDrop* Arena::CreateMaybeMessage<::Protocol::S_ItemDrop>(Arena*);
template<> ::Protocol::S_MPRecover* Arena::CreateMaybeMessage<::Protocol::S_MPRecover>(Arena*);
template<> ::Protocol::S_Move* Arena::CreateMaybeMessage<::Protocol::S_Move>(Arena*);
template<> ::Protocol::S_MyPlayer* Arena::CreateMaybeMessage<::Protocol::S_MyPlayer>(Arena*);
template<> ::Protocol::S_Quest* Arena::CreateMaybeMessage<::Protocol::S_Quest>(Arena*);
template<> ::Protocol::S_QuestComplete* Arena::CreateMaybeMessage<::Protocol::S_QuestComplete>(Arena*);
template<> ::Protocol::S_QuestList* Arena::CreateMaybeMessage<::Protocol::S_QuestList>(Arena*);
template<> ::Protocol::S_QuestProcess* Arena::CreateMaybeMessage<::Protocol::S_QuestProcess>(Arena*);
template<> ::Protocol::S_QuestState* Arena::CreateMaybeMessage<::Protocol::S_QuestState>(Arena*);
template<> ::Protocol::S_RemoveObject* Arena::CreateMaybeMessage<::Protocol::S_RemoveObject>(Arena*);
template<> ::Protocol::S_Reset* Arena::CreateMaybeMessage<::Protocol::S_Reset>(Arena*);
template<> ::Protocol::S_SendMessage* Arena::CreateMaybeMessage<::Protocol::S_SendMessage>(Arena*);
template<> ::Protocol::S_TEST* Arena::CreateMaybeMessage<::Protocol::S_TEST>(Arena*);
template<> ::Protocol::S_Teleport* Arena::CreateMaybeMessage<::Protocol::S_Teleport>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class S_TEST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_TEST) */ {
 public:
  inline S_TEST() : S_TEST(nullptr) {}
  ~S_TEST() override;
  explicit PROTOBUF_CONSTEXPR S_TEST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_TEST(const S_TEST& from);
  S_TEST(S_TEST&& from) noexcept
    : S_TEST() {
    *this = ::std::move(from);
  }

  inline S_TEST& operator=(const S_TEST& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_TEST& operator=(S_TEST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_TEST& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_TEST* internal_default_instance() {
    return reinterpret_cast<const S_TEST*>(
               &_S_TEST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(S_TEST& a, S_TEST& b) {
    a.Swap(&b);
  }
  inline void Swap(S_TEST* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_TEST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_TEST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_TEST>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_TEST& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_TEST& from) {
    S_TEST::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_TEST* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_TEST";
  }
  protected:
  explicit S_TEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuffsFieldNumber = 4,
    kIdFieldNumber = 1,
    kHpFieldNumber = 2,
    kAttackFieldNumber = 3,
  };
  // repeated .Protocol.BuffData buffs = 4;
  int buffs_size() const;
  private:
  int _internal_buffs_size() const;
  public:
  void clear_buffs();
  ::Protocol::BuffData* mutable_buffs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::BuffData >*
      mutable_buffs();
  private:
  const ::Protocol::BuffData& _internal_buffs(int index) const;
  ::Protocol::BuffData* _internal_add_buffs();
  public:
  const ::Protocol::BuffData& buffs(int index) const;
  ::Protocol::BuffData* add_buffs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::BuffData >&
      buffs() const;

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint32 hp = 2;
  void clear_hp();
  uint32_t hp() const;
  void set_hp(uint32_t value);
  private:
  uint32_t _internal_hp() const;
  void _internal_set_hp(uint32_t value);
  public:

  // uint32 attack = 3;
  void clear_attack();
  uint32_t attack() const;
  void set_attack(uint32_t value);
  private:
  uint32_t _internal_attack() const;
  void _internal_set_attack(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_TEST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::BuffData > buffs_;
    uint64_t id_;
    uint32_t hp_;
    uint32_t attack_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_EnterGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_EnterGame) */ {
 public:
  inline S_EnterGame() : S_EnterGame(nullptr) {}
  ~S_EnterGame() override;
  explicit PROTOBUF_CONSTEXPR S_EnterGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_EnterGame(const S_EnterGame& from);
  S_EnterGame(S_EnterGame&& from) noexcept
    : S_EnterGame() {
    *this = ::std::move(from);
  }

  inline S_EnterGame& operator=(const S_EnterGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_EnterGame& operator=(S_EnterGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_EnterGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_EnterGame* internal_default_instance() {
    return reinterpret_cast<const S_EnterGame*>(
               &_S_EnterGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_EnterGame& a, S_EnterGame& b) {
    a.Swap(&b);
  }
  inline void Swap(S_EnterGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_EnterGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_EnterGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_EnterGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_EnterGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_EnterGame& from) {
    S_EnterGame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_EnterGame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_EnterGame";
  }
  protected:
  explicit S_EnterGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // uint64 accountId = 2;
  void clear_accountid();
  uint64_t accountid() const;
  void set_accountid(uint64_t value);
  private:
  uint64_t _internal_accountid() const;
  void _internal_set_accountid(uint64_t value);
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_EnterGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t accountid_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_LeaveGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_LeaveGame) */ {
 public:
  inline C_LeaveGame() : C_LeaveGame(nullptr) {}
  ~C_LeaveGame() override;
  explicit PROTOBUF_CONSTEXPR C_LeaveGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LeaveGame(const C_LeaveGame& from);
  C_LeaveGame(C_LeaveGame&& from) noexcept
    : C_LeaveGame() {
    *this = ::std::move(from);
  }

  inline C_LeaveGame& operator=(const C_LeaveGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LeaveGame& operator=(C_LeaveGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LeaveGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LeaveGame* internal_default_instance() {
    return reinterpret_cast<const C_LeaveGame*>(
               &_C_LeaveGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_LeaveGame& a, C_LeaveGame& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LeaveGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LeaveGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LeaveGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LeaveGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_LeaveGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_LeaveGame& from) {
    C_LeaveGame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LeaveGame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LeaveGame";
  }
  protected:
  explicit C_LeaveGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // uint64 accountId = 2;
  void clear_accountid();
  uint64_t accountid() const;
  void set_accountid(uint64_t value);
  private:
  uint64_t _internal_accountid() const;
  void _internal_set_accountid(uint64_t value);
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_LeaveGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t accountid_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_MyPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MyPlayer) */ {
 public:
  inline S_MyPlayer() : S_MyPlayer(nullptr) {}
  ~S_MyPlayer() override;
  explicit PROTOBUF_CONSTEXPR S_MyPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MyPlayer(const S_MyPlayer& from);
  S_MyPlayer(S_MyPlayer&& from) noexcept
    : S_MyPlayer() {
    *this = ::std::move(from);
  }

  inline S_MyPlayer& operator=(const S_MyPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MyPlayer& operator=(S_MyPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MyPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MyPlayer* internal_default_instance() {
    return reinterpret_cast<const S_MyPlayer*>(
               &_S_MyPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_MyPlayer& a, S_MyPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MyPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MyPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MyPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MyPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MyPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MyPlayer& from) {
    S_MyPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MyPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_MyPlayer";
  }
  protected:
  explicit S_MyPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kReviveFieldNumber = 2,
  };
  // .Protocol.ObjectInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Protocol::ObjectInfo& info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_info();
  ::Protocol::ObjectInfo* mutable_info();
  void set_allocated_info(::Protocol::ObjectInfo* info);
  private:
  const ::Protocol::ObjectInfo& _internal_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Protocol::ObjectInfo* info);
  ::Protocol::ObjectInfo* unsafe_arena_release_info();

  // bool revive = 2;
  void clear_revive();
  bool revive() const;
  void set_revive(bool value);
  private:
  bool _internal_revive() const;
  void _internal_set_revive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_MyPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* info_;
    bool revive_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_AddObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_AddObject) */ {
 public:
  inline S_AddObject() : S_AddObject(nullptr) {}
  ~S_AddObject() override;
  explicit PROTOBUF_CONSTEXPR S_AddObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_AddObject(const S_AddObject& from);
  S_AddObject(S_AddObject&& from) noexcept
    : S_AddObject() {
    *this = ::std::move(from);
  }

  inline S_AddObject& operator=(const S_AddObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_AddObject& operator=(S_AddObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_AddObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_AddObject* internal_default_instance() {
    return reinterpret_cast<const S_AddObject*>(
               &_S_AddObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S_AddObject& a, S_AddObject& b) {
    a.Swap(&b);
  }
  inline void Swap(S_AddObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_AddObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_AddObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_AddObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_AddObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_AddObject& from) {
    S_AddObject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_AddObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_AddObject";
  }
  protected:
  explicit S_AddObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 1,
  };
  // repeated .Protocol.ObjectInfo objects = 1;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::Protocol::ObjectInfo* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
      mutable_objects();
  private:
  const ::Protocol::ObjectInfo& _internal_objects(int index) const;
  ::Protocol::ObjectInfo* _internal_add_objects();
  public:
  const ::Protocol::ObjectInfo& objects(int index) const;
  ::Protocol::ObjectInfo* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
      objects() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_AddObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo > objects_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_RemoveObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_RemoveObject) */ {
 public:
  inline S_RemoveObject() : S_RemoveObject(nullptr) {}
  ~S_RemoveObject() override;
  explicit PROTOBUF_CONSTEXPR S_RemoveObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_RemoveObject(const S_RemoveObject& from);
  S_RemoveObject(S_RemoveObject&& from) noexcept
    : S_RemoveObject() {
    *this = ::std::move(from);
  }

  inline S_RemoveObject& operator=(const S_RemoveObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_RemoveObject& operator=(S_RemoveObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_RemoveObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_RemoveObject* internal_default_instance() {
    return reinterpret_cast<const S_RemoveObject*>(
               &_S_RemoveObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_RemoveObject& a, S_RemoveObject& b) {
    a.Swap(&b);
  }
  inline void Swap(S_RemoveObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_RemoveObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_RemoveObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_RemoveObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_RemoveObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_RemoveObject& from) {
    S_RemoveObject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_RemoveObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_RemoveObject";
  }
  protected:
  explicit S_RemoveObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated uint64 ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  uint64_t _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_ids() const;
  void _internal_add_ids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_ids();
  public:
  uint64_t ids(int index) const;
  void set_ids(int index, uint64_t value);
  void add_ids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_ids();

  // @@protoc_insertion_point(class_scope:Protocol.S_RemoveObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > ids_;
    mutable std::atomic<int> _ids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_RemoveObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_RemoveObject) */ {
 public:
  inline C_RemoveObject() : C_RemoveObject(nullptr) {}
  ~C_RemoveObject() override;
  explicit PROTOBUF_CONSTEXPR C_RemoveObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_RemoveObject(const C_RemoveObject& from);
  C_RemoveObject(C_RemoveObject&& from) noexcept
    : C_RemoveObject() {
    *this = ::std::move(from);
  }

  inline C_RemoveObject& operator=(const C_RemoveObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_RemoveObject& operator=(C_RemoveObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_RemoveObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_RemoveObject* internal_default_instance() {
    return reinterpret_cast<const C_RemoveObject*>(
               &_C_RemoveObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C_RemoveObject& a, C_RemoveObject& b) {
    a.Swap(&b);
  }
  inline void Swap(C_RemoveObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_RemoveObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_RemoveObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_RemoveObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_RemoveObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_RemoveObject& from) {
    C_RemoveObject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_RemoveObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_RemoveObject";
  }
  protected:
  explicit C_RemoveObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_RemoveObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_Move final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_Move) */ {
 public:
  inline C_Move() : C_Move(nullptr) {}
  ~C_Move() override;
  explicit PROTOBUF_CONSTEXPR C_Move(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Move(const C_Move& from);
  C_Move(C_Move&& from) noexcept
    : C_Move() {
    *this = ::std::move(from);
  }

  inline C_Move& operator=(const C_Move& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Move& operator=(C_Move&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Move& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Move* internal_default_instance() {
    return reinterpret_cast<const C_Move*>(
               &_C_Move_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(C_Move& a, C_Move& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Move* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Move* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Move* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Move>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Move& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_Move& from) {
    C_Move::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Move* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_Move";
  }
  protected:
  explicit C_Move(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .Protocol.ObjectInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Protocol::ObjectInfo& info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_info();
  ::Protocol::ObjectInfo* mutable_info();
  void set_allocated_info(::Protocol::ObjectInfo* info);
  private:
  const ::Protocol::ObjectInfo& _internal_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Protocol::ObjectInfo* info);
  ::Protocol::ObjectInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:Protocol.C_Move)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_Move final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_Move) */ {
 public:
  inline S_Move() : S_Move(nullptr) {}
  ~S_Move() override;
  explicit PROTOBUF_CONSTEXPR S_Move(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Move(const S_Move& from);
  S_Move(S_Move&& from) noexcept
    : S_Move() {
    *this = ::std::move(from);
  }

  inline S_Move& operator=(const S_Move& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Move& operator=(S_Move&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Move& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Move* internal_default_instance() {
    return reinterpret_cast<const S_Move*>(
               &_S_Move_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S_Move& a, S_Move& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Move* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Move* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Move* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Move>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Move& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_Move& from) {
    S_Move::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Move* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_Move";
  }
  protected:
  explicit S_Move(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .Protocol.ObjectInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Protocol::ObjectInfo& info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_info();
  ::Protocol::ObjectInfo* mutable_info();
  void set_allocated_info(::Protocol::ObjectInfo* info);
  private:
  const ::Protocol::ObjectInfo& _internal_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Protocol::ObjectInfo* info);
  ::Protocol::ObjectInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:Protocol.S_Move)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_Fire final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_Fire) */ {
 public:
  inline C_Fire() : C_Fire(nullptr) {}
  ~C_Fire() override;
  explicit PROTOBUF_CONSTEXPR C_Fire(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Fire(const C_Fire& from);
  C_Fire(C_Fire&& from) noexcept
    : C_Fire() {
    *this = ::std::move(from);
  }

  inline C_Fire& operator=(const C_Fire& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Fire& operator=(C_Fire&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Fire& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Fire* internal_default_instance() {
    return reinterpret_cast<const C_Fire*>(
               &_C_Fire_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(C_Fire& a, C_Fire& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Fire* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Fire* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Fire* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Fire>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Fire& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_Fire& from) {
    C_Fire::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Fire* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_Fire";
  }
  protected:
  explicit C_Fire(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kOwneridFieldNumber = 2,
    kTickFieldNumber = 3,
  };
  // .Protocol.ObjectInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Protocol::ObjectInfo& info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_info();
  ::Protocol::ObjectInfo* mutable_info();
  void set_allocated_info(::Protocol::ObjectInfo* info);
  private:
  const ::Protocol::ObjectInfo& _internal_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Protocol::ObjectInfo* info);
  ::Protocol::ObjectInfo* unsafe_arena_release_info();

  // uint64 ownerid = 2;
  void clear_ownerid();
  uint64_t ownerid() const;
  void set_ownerid(uint64_t value);
  private:
  uint64_t _internal_ownerid() const;
  void _internal_set_ownerid(uint64_t value);
  public:

  // uint64 tick = 3;
  void clear_tick();
  uint64_t tick() const;
  void set_tick(uint64_t value);
  private:
  uint64_t _internal_tick() const;
  void _internal_set_tick(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_Fire)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* info_;
    uint64_t ownerid_;
    uint64_t tick_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_Fire final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_Fire) */ {
 public:
  inline S_Fire() : S_Fire(nullptr) {}
  ~S_Fire() override;
  explicit PROTOBUF_CONSTEXPR S_Fire(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Fire(const S_Fire& from);
  S_Fire(S_Fire&& from) noexcept
    : S_Fire() {
    *this = ::std::move(from);
  }

  inline S_Fire& operator=(const S_Fire& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Fire& operator=(S_Fire&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Fire& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Fire* internal_default_instance() {
    return reinterpret_cast<const S_Fire*>(
               &_S_Fire_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(S_Fire& a, S_Fire& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Fire* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Fire* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Fire* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Fire>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Fire& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_Fire& from) {
    S_Fire::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Fire* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_Fire";
  }
  protected:
  explicit S_Fire(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kOwneridFieldNumber = 2,
    kTickFieldNumber = 3,
  };
  // .Protocol.ObjectInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Protocol::ObjectInfo& info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_info();
  ::Protocol::ObjectInfo* mutable_info();
  void set_allocated_info(::Protocol::ObjectInfo* info);
  private:
  const ::Protocol::ObjectInfo& _internal_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Protocol::ObjectInfo* info);
  ::Protocol::ObjectInfo* unsafe_arena_release_info();

  // uint64 ownerid = 2;
  void clear_ownerid();
  uint64_t ownerid() const;
  void set_ownerid(uint64_t value);
  private:
  uint64_t _internal_ownerid() const;
  void _internal_set_ownerid(uint64_t value);
  public:

  // uint64 tick = 3;
  void clear_tick();
  uint64_t tick() const;
  void set_tick(uint64_t value);
  private:
  uint64_t _internal_tick() const;
  void _internal_set_tick(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_Fire)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* info_;
    uint64_t ownerid_;
    uint64_t tick_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_Hit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_Hit) */ {
 public:
  inline S_Hit() : S_Hit(nullptr) {}
  ~S_Hit() override;
  explicit PROTOBUF_CONSTEXPR S_Hit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Hit(const S_Hit& from);
  S_Hit(S_Hit&& from) noexcept
    : S_Hit() {
    *this = ::std::move(from);
  }

  inline S_Hit& operator=(const S_Hit& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Hit& operator=(S_Hit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Hit& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Hit* internal_default_instance() {
    return reinterpret_cast<const S_Hit*>(
               &_S_Hit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S_Hit& a, S_Hit& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Hit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Hit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Hit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Hit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Hit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_Hit& from) {
    S_Hit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Hit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_Hit";
  }
  protected:
  explicit S_Hit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectidFieldNumber = 1,
    kAttackeridFieldNumber = 2,
    kDamageFieldNumber = 3,
  };
  // uint64 objectid = 1;
  void clear_objectid();
  uint64_t objectid() const;
  void set_objectid(uint64_t value);
  private:
  uint64_t _internal_objectid() const;
  void _internal_set_objectid(uint64_t value);
  public:

  // uint64 attackerid = 2;
  void clear_attackerid();
  uint64_t attackerid() const;
  void set_attackerid(uint64_t value);
  private:
  uint64_t _internal_attackerid() const;
  void _internal_set_attackerid(uint64_t value);
  public:

  // int32 damage = 3;
  void clear_damage();
  int32_t damage() const;
  void set_damage(int32_t value);
  private:
  int32_t _internal_damage() const;
  void _internal_set_damage(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_Hit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t objectid_;
    uint64_t attackerid_;
    int32_t damage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_Hit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_Hit) */ {
 public:
  inline C_Hit() : C_Hit(nullptr) {}
  ~C_Hit() override;
  explicit PROTOBUF_CONSTEXPR C_Hit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Hit(const C_Hit& from);
  C_Hit(C_Hit&& from) noexcept
    : C_Hit() {
    *this = ::std::move(from);
  }

  inline C_Hit& operator=(const C_Hit& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Hit& operator=(C_Hit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Hit& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Hit* internal_default_instance() {
    return reinterpret_cast<const C_Hit*>(
               &_C_Hit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(C_Hit& a, C_Hit& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Hit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Hit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Hit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Hit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Hit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_Hit& from) {
    C_Hit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Hit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_Hit";
  }
  protected:
  explicit C_Hit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectidFieldNumber = 1,
    kAttackeridFieldNumber = 2,
  };
  // uint64 objectid = 1;
  void clear_objectid();
  uint64_t objectid() const;
  void set_objectid(uint64_t value);
  private:
  uint64_t _internal_objectid() const;
  void _internal_set_objectid(uint64_t value);
  public:

  // uint64 attackerid = 2;
  void clear_attackerid();
  uint64_t attackerid() const;
  void set_attackerid(uint64_t value);
  private:
  uint64_t _internal_attackerid() const;
  void _internal_set_attackerid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_Hit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t objectid_;
    uint64_t attackerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_MPRecover final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MPRecover) */ {
 public:
  inline S_MPRecover() : S_MPRecover(nullptr) {}
  ~S_MPRecover() override;
  explicit PROTOBUF_CONSTEXPR S_MPRecover(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MPRecover(const S_MPRecover& from);
  S_MPRecover(S_MPRecover&& from) noexcept
    : S_MPRecover() {
    *this = ::std::move(from);
  }

  inline S_MPRecover& operator=(const S_MPRecover& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MPRecover& operator=(S_MPRecover&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MPRecover& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MPRecover* internal_default_instance() {
    return reinterpret_cast<const S_MPRecover*>(
               &_S_MPRecover_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(S_MPRecover& a, S_MPRecover& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MPRecover* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MPRecover* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MPRecover* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MPRecover>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MPRecover& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MPRecover& from) {
    S_MPRecover::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MPRecover* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_MPRecover";
  }
  protected:
  explicit S_MPRecover(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectidFieldNumber = 1,
    kMpFieldNumber = 2,
  };
  // uint64 objectid = 1;
  void clear_objectid();
  uint64_t objectid() const;
  void set_objectid(uint64_t value);
  private:
  uint64_t _internal_objectid() const;
  void _internal_set_objectid(uint64_t value);
  public:

  // uint64 mp = 2;
  void clear_mp();
  uint64_t mp() const;
  void set_mp(uint64_t value);
  private:
  uint64_t _internal_mp() const;
  void _internal_set_mp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_MPRecover)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t objectid_;
    uint64_t mp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_SendMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SendMessage) */ {
 public:
  inline C_SendMessage() : C_SendMessage(nullptr) {}
  ~C_SendMessage() override;
  explicit PROTOBUF_CONSTEXPR C_SendMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SendMessage(const C_SendMessage& from);
  C_SendMessage(C_SendMessage&& from) noexcept
    : C_SendMessage() {
    *this = ::std::move(from);
  }

  inline C_SendMessage& operator=(const C_SendMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SendMessage& operator=(C_SendMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SendMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SendMessage* internal_default_instance() {
    return reinterpret_cast<const C_SendMessage*>(
               &_C_SendMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(C_SendMessage& a, C_SendMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SendMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SendMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_SendMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_SendMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_SendMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_SendMessage& from) {
    C_SendMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SendMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_SendMessage";
  }
  protected:
  explicit C_SendMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextsFieldNumber = 1,
  };
  // .Protocol.Text texts = 1;
  bool has_texts() const;
  private:
  bool _internal_has_texts() const;
  public:
  void clear_texts();
  const ::Protocol::Text& texts() const;
  PROTOBUF_NODISCARD ::Protocol::Text* release_texts();
  ::Protocol::Text* mutable_texts();
  void set_allocated_texts(::Protocol::Text* texts);
  private:
  const ::Protocol::Text& _internal_texts() const;
  ::Protocol::Text* _internal_mutable_texts();
  public:
  void unsafe_arena_set_allocated_texts(
      ::Protocol::Text* texts);
  ::Protocol::Text* unsafe_arena_release_texts();

  // @@protoc_insertion_point(class_scope:Protocol.C_SendMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Text* texts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SendMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SendMessage) */ {
 public:
  inline S_SendMessage() : S_SendMessage(nullptr) {}
  ~S_SendMessage() override;
  explicit PROTOBUF_CONSTEXPR S_SendMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SendMessage(const S_SendMessage& from);
  S_SendMessage(S_SendMessage&& from) noexcept
    : S_SendMessage() {
    *this = ::std::move(from);
  }

  inline S_SendMessage& operator=(const S_SendMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SendMessage& operator=(S_SendMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SendMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SendMessage* internal_default_instance() {
    return reinterpret_cast<const S_SendMessage*>(
               &_S_SendMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(S_SendMessage& a, S_SendMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SendMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SendMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SendMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SendMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SendMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SendMessage& from) {
    S_SendMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SendMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SendMessage";
  }
  protected:
  explicit S_SendMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextsFieldNumber = 1,
  };
  // .Protocol.Text texts = 1;
  bool has_texts() const;
  private:
  bool _internal_has_texts() const;
  public:
  void clear_texts();
  const ::Protocol::Text& texts() const;
  PROTOBUF_NODISCARD ::Protocol::Text* release_texts();
  ::Protocol::Text* mutable_texts();
  void set_allocated_texts(::Protocol::Text* texts);
  private:
  const ::Protocol::Text& _internal_texts() const;
  ::Protocol::Text* _internal_mutable_texts();
  public:
  void unsafe_arena_set_allocated_texts(
      ::Protocol::Text* texts);
  ::Protocol::Text* unsafe_arena_release_texts();

  // @@protoc_insertion_point(class_scope:Protocol.S_SendMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Text* texts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_Revive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_Revive) */ {
 public:
  inline C_Revive() : C_Revive(nullptr) {}
  ~C_Revive() override;
  explicit PROTOBUF_CONSTEXPR C_Revive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Revive(const C_Revive& from);
  C_Revive(C_Revive&& from) noexcept
    : C_Revive() {
    *this = ::std::move(from);
  }

  inline C_Revive& operator=(const C_Revive& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Revive& operator=(C_Revive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Revive& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Revive* internal_default_instance() {
    return reinterpret_cast<const C_Revive*>(
               &_C_Revive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(C_Revive& a, C_Revive& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Revive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Revive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Revive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Revive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Revive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_Revive& from) {
    C_Revive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Revive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_Revive";
  }
  protected:
  explicit C_Revive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .Protocol.ObjectInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Protocol::ObjectInfo& info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_info();
  ::Protocol::ObjectInfo* mutable_info();
  void set_allocated_info(::Protocol::ObjectInfo* info);
  private:
  const ::Protocol::ObjectInfo& _internal_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Protocol::ObjectInfo* info);
  ::Protocol::ObjectInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:Protocol.C_Revive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_SyncInventory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SyncInventory) */ {
 public:
  inline C_SyncInventory() : C_SyncInventory(nullptr) {}
  ~C_SyncInventory() override;
  explicit PROTOBUF_CONSTEXPR C_SyncInventory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SyncInventory(const C_SyncInventory& from);
  C_SyncInventory(C_SyncInventory&& from) noexcept
    : C_SyncInventory() {
    *this = ::std::move(from);
  }

  inline C_SyncInventory& operator=(const C_SyncInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SyncInventory& operator=(C_SyncInventory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SyncInventory& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SyncInventory* internal_default_instance() {
    return reinterpret_cast<const C_SyncInventory*>(
               &_C_SyncInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(C_SyncInventory& a, C_SyncInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SyncInventory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SyncInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_SyncInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_SyncInventory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_SyncInventory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_SyncInventory& from) {
    C_SyncInventory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SyncInventory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_SyncInventory";
  }
  protected:
  explicit C_SyncInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
  };
  // uint64 objectId = 1;
  void clear_objectid();
  uint64_t objectid() const;
  void set_objectid(uint64_t value);
  private:
  uint64_t _internal_objectid() const;
  void _internal_set_objectid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_SyncInventory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t objectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_Teleport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_Teleport) */ {
 public:
  inline C_Teleport() : C_Teleport(nullptr) {}
  ~C_Teleport() override;
  explicit PROTOBUF_CONSTEXPR C_Teleport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Teleport(const C_Teleport& from);
  C_Teleport(C_Teleport&& from) noexcept
    : C_Teleport() {
    *this = ::std::move(from);
  }

  inline C_Teleport& operator=(const C_Teleport& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Teleport& operator=(C_Teleport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Teleport& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Teleport* internal_default_instance() {
    return reinterpret_cast<const C_Teleport*>(
               &_C_Teleport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(C_Teleport& a, C_Teleport& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Teleport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Teleport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Teleport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Teleport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Teleport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_Teleport& from) {
    C_Teleport::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Teleport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_Teleport";
  }
  protected:
  explicit C_Teleport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
  };
  // uint64 objectId = 1;
  void clear_objectid();
  uint64_t objectid() const;
  void set_objectid(uint64_t value);
  private:
  uint64_t _internal_objectid() const;
  void _internal_set_objectid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_Teleport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t objectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_Teleport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_Teleport) */ {
 public:
  inline S_Teleport() : S_Teleport(nullptr) {}
  ~S_Teleport() override;
  explicit PROTOBUF_CONSTEXPR S_Teleport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Teleport(const S_Teleport& from);
  S_Teleport(S_Teleport&& from) noexcept
    : S_Teleport() {
    *this = ::std::move(from);
  }

  inline S_Teleport& operator=(const S_Teleport& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Teleport& operator=(S_Teleport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Teleport& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Teleport* internal_default_instance() {
    return reinterpret_cast<const S_Teleport*>(
               &_S_Teleport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(S_Teleport& a, S_Teleport& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Teleport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Teleport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Teleport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Teleport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Teleport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_Teleport& from) {
    S_Teleport::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Teleport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_Teleport";
  }
  protected:
  explicit S_Teleport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kPosXFieldNumber = 2,
    kPosYFieldNumber = 3,
  };
  // uint64 objectId = 1;
  void clear_objectid();
  uint64_t objectid() const;
  void set_objectid(uint64_t value);
  private:
  uint64_t _internal_objectid() const;
  void _internal_set_objectid(uint64_t value);
  public:

  // int32 posX = 2;
  void clear_posx();
  int32_t posx() const;
  void set_posx(int32_t value);
  private:
  int32_t _internal_posx() const;
  void _internal_set_posx(int32_t value);
  public:

  // int32 posY = 3;
  void clear_posy();
  int32_t posy() const;
  void set_posy(int32_t value);
  private:
  int32_t _internal_posy() const;
  void _internal_set_posy(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_Teleport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t objectid_;
    int32_t posx_;
    int32_t posy_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_Gold final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_Gold) */ {
 public:
  inline S_Gold() : S_Gold(nullptr) {}
  ~S_Gold() override;
  explicit PROTOBUF_CONSTEXPR S_Gold(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Gold(const S_Gold& from);
  S_Gold(S_Gold&& from) noexcept
    : S_Gold() {
    *this = ::std::move(from);
  }

  inline S_Gold& operator=(const S_Gold& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Gold& operator=(S_Gold&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Gold& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Gold* internal_default_instance() {
    return reinterpret_cast<const S_Gold*>(
               &_S_Gold_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(S_Gold& a, S_Gold& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Gold* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Gold* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Gold* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Gold>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Gold& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_Gold& from) {
    S_Gold::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Gold* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_Gold";
  }
  protected:
  explicit S_Gold(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kGoldFieldNumber = 2,
  };
  // uint64 objectId = 1;
  void clear_objectid();
  uint64_t objectid() const;
  void set_objectid(uint64_t value);
  private:
  uint64_t _internal_objectid() const;
  void _internal_set_objectid(uint64_t value);
  public:

  // int32 gold = 2;
  void clear_gold();
  int32_t gold() const;
  void set_gold(int32_t value);
  private:
  int32_t _internal_gold() const;
  void _internal_set_gold(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_Gold)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t objectid_;
    int32_t gold_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_Quest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_Quest) */ {
 public:
  inline C_Quest() : C_Quest(nullptr) {}
  ~C_Quest() override;
  explicit PROTOBUF_CONSTEXPR C_Quest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Quest(const C_Quest& from);
  C_Quest(C_Quest&& from) noexcept
    : C_Quest() {
    *this = ::std::move(from);
  }

  inline C_Quest& operator=(const C_Quest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Quest& operator=(C_Quest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Quest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Quest* internal_default_instance() {
    return reinterpret_cast<const C_Quest*>(
               &_C_Quest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(C_Quest& a, C_Quest& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Quest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Quest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Quest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Quest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Quest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_Quest& from) {
    C_Quest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Quest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_Quest";
  }
  protected:
  explicit C_Quest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kQuestIdFieldNumber = 2,
  };
  // uint64 objectId = 1;
  void clear_objectid();
  uint64_t objectid() const;
  void set_objectid(uint64_t value);
  private:
  uint64_t _internal_objectid() const;
  void _internal_set_objectid(uint64_t value);
  public:

  // uint64 questId = 2;
  void clear_questid();
  uint64_t questid() const;
  void set_questid(uint64_t value);
  private:
  uint64_t _internal_questid() const;
  void _internal_set_questid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_Quest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t objectid_;
    uint64_t questid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_Quest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_Quest) */ {
 public:
  inline S_Quest() : S_Quest(nullptr) {}
  ~S_Quest() override;
  explicit PROTOBUF_CONSTEXPR S_Quest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Quest(const S_Quest& from);
  S_Quest(S_Quest&& from) noexcept
    : S_Quest() {
    *this = ::std::move(from);
  }

  inline S_Quest& operator=(const S_Quest& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Quest& operator=(S_Quest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Quest& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Quest* internal_default_instance() {
    return reinterpret_cast<const S_Quest*>(
               &_S_Quest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(S_Quest& a, S_Quest& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Quest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Quest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Quest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Quest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Quest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_Quest& from) {
    S_Quest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Quest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_Quest";
  }
  protected:
  explicit S_Quest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestinfoFieldNumber = 1,
  };
  // .Protocol.QuestInfo questinfo = 1;
  bool has_questinfo() const;
  private:
  bool _internal_has_questinfo() const;
  public:
  void clear_questinfo();
  const ::Protocol::QuestInfo& questinfo() const;
  PROTOBUF_NODISCARD ::Protocol::QuestInfo* release_questinfo();
  ::Protocol::QuestInfo* mutable_questinfo();
  void set_allocated_questinfo(::Protocol::QuestInfo* questinfo);
  private:
  const ::Protocol::QuestInfo& _internal_questinfo() const;
  ::Protocol::QuestInfo* _internal_mutable_questinfo();
  public:
  void unsafe_arena_set_allocated_questinfo(
      ::Protocol::QuestInfo* questinfo);
  ::Protocol::QuestInfo* unsafe_arena_release_questinfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_Quest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::QuestInfo* questinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_QuestProcess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_QuestProcess) */ {
 public:
  inline S_QuestProcess() : S_QuestProcess(nullptr) {}
  ~S_QuestProcess() override;
  explicit PROTOBUF_CONSTEXPR S_QuestProcess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_QuestProcess(const S_QuestProcess& from);
  S_QuestProcess(S_QuestProcess&& from) noexcept
    : S_QuestProcess() {
    *this = ::std::move(from);
  }

  inline S_QuestProcess& operator=(const S_QuestProcess& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_QuestProcess& operator=(S_QuestProcess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_QuestProcess& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_QuestProcess* internal_default_instance() {
    return reinterpret_cast<const S_QuestProcess*>(
               &_S_QuestProcess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(S_QuestProcess& a, S_QuestProcess& b) {
    a.Swap(&b);
  }
  inline void Swap(S_QuestProcess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_QuestProcess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_QuestProcess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_QuestProcess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_QuestProcess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_QuestProcess& from) {
    S_QuestProcess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_QuestProcess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_QuestProcess";
  }
  protected:
  explicit S_QuestProcess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestinfoFieldNumber = 1,
  };
  // .Protocol.QuestInfo questinfo = 1;
  bool has_questinfo() const;
  private:
  bool _internal_has_questinfo() const;
  public:
  void clear_questinfo();
  const ::Protocol::QuestInfo& questinfo() const;
  PROTOBUF_NODISCARD ::Protocol::QuestInfo* release_questinfo();
  ::Protocol::QuestInfo* mutable_questinfo();
  void set_allocated_questinfo(::Protocol::QuestInfo* questinfo);
  private:
  const ::Protocol::QuestInfo& _internal_questinfo() const;
  ::Protocol::QuestInfo* _internal_mutable_questinfo();
  public:
  void unsafe_arena_set_allocated_questinfo(
      ::Protocol::QuestInfo* questinfo);
  ::Protocol::QuestInfo* unsafe_arena_release_questinfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_QuestProcess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::QuestInfo* questinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_QuestComplete final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_QuestComplete) */ {
 public:
  inline S_QuestComplete() : S_QuestComplete(nullptr) {}
  ~S_QuestComplete() override;
  explicit PROTOBUF_CONSTEXPR S_QuestComplete(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_QuestComplete(const S_QuestComplete& from);
  S_QuestComplete(S_QuestComplete&& from) noexcept
    : S_QuestComplete() {
    *this = ::std::move(from);
  }

  inline S_QuestComplete& operator=(const S_QuestComplete& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_QuestComplete& operator=(S_QuestComplete&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_QuestComplete& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_QuestComplete* internal_default_instance() {
    return reinterpret_cast<const S_QuestComplete*>(
               &_S_QuestComplete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(S_QuestComplete& a, S_QuestComplete& b) {
    a.Swap(&b);
  }
  inline void Swap(S_QuestComplete* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_QuestComplete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_QuestComplete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_QuestComplete>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_QuestComplete& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_QuestComplete& from) {
    S_QuestComplete::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_QuestComplete* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_QuestComplete";
  }
  protected:
  explicit S_QuestComplete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestinfoFieldNumber = 1,
  };
  // .Protocol.QuestInfo questinfo = 1;
  bool has_questinfo() const;
  private:
  bool _internal_has_questinfo() const;
  public:
  void clear_questinfo();
  const ::Protocol::QuestInfo& questinfo() const;
  PROTOBUF_NODISCARD ::Protocol::QuestInfo* release_questinfo();
  ::Protocol::QuestInfo* mutable_questinfo();
  void set_allocated_questinfo(::Protocol::QuestInfo* questinfo);
  private:
  const ::Protocol::QuestInfo& _internal_questinfo() const;
  ::Protocol::QuestInfo* _internal_mutable_questinfo();
  public:
  void unsafe_arena_set_allocated_questinfo(
      ::Protocol::QuestInfo* questinfo);
  ::Protocol::QuestInfo* unsafe_arena_release_questinfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_QuestComplete)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::QuestInfo* questinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_QuestFinish final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_QuestFinish) */ {
 public:
  inline C_QuestFinish() : C_QuestFinish(nullptr) {}
  ~C_QuestFinish() override;
  explicit PROTOBUF_CONSTEXPR C_QuestFinish(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_QuestFinish(const C_QuestFinish& from);
  C_QuestFinish(C_QuestFinish&& from) noexcept
    : C_QuestFinish() {
    *this = ::std::move(from);
  }

  inline C_QuestFinish& operator=(const C_QuestFinish& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_QuestFinish& operator=(C_QuestFinish&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_QuestFinish& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_QuestFinish* internal_default_instance() {
    return reinterpret_cast<const C_QuestFinish*>(
               &_C_QuestFinish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(C_QuestFinish& a, C_QuestFinish& b) {
    a.Swap(&b);
  }
  inline void Swap(C_QuestFinish* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_QuestFinish* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_QuestFinish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_QuestFinish>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_QuestFinish& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_QuestFinish& from) {
    C_QuestFinish::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_QuestFinish* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_QuestFinish";
  }
  protected:
  explicit C_QuestFinish(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kQuestIdFieldNumber = 2,
  };
  // uint64 objectId = 1;
  void clear_objectid();
  uint64_t objectid() const;
  void set_objectid(uint64_t value);
  private:
  uint64_t _internal_objectid() const;
  void _internal_set_objectid(uint64_t value);
  public:

  // uint64 questId = 2;
  void clear_questid();
  uint64_t questid() const;
  void set_questid(uint64_t value);
  private:
  uint64_t _internal_questid() const;
  void _internal_set_questid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_QuestFinish)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t objectid_;
    uint64_t questid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_QuestList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_QuestList) */ {
 public:
  inline C_QuestList() : C_QuestList(nullptr) {}
  ~C_QuestList() override;
  explicit PROTOBUF_CONSTEXPR C_QuestList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_QuestList(const C_QuestList& from);
  C_QuestList(C_QuestList&& from) noexcept
    : C_QuestList() {
    *this = ::std::move(from);
  }

  inline C_QuestList& operator=(const C_QuestList& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_QuestList& operator=(C_QuestList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_QuestList& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_QuestList* internal_default_instance() {
    return reinterpret_cast<const C_QuestList*>(
               &_C_QuestList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(C_QuestList& a, C_QuestList& b) {
    a.Swap(&b);
  }
  inline void Swap(C_QuestList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_QuestList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_QuestList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_QuestList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_QuestList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_QuestList& from) {
    C_QuestList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_QuestList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_QuestList";
  }
  protected:
  explicit C_QuestList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestinfoFieldNumber = 1,
  };
  // .Protocol.QuestInfo questinfo = 1;
  bool has_questinfo() const;
  private:
  bool _internal_has_questinfo() const;
  public:
  void clear_questinfo();
  const ::Protocol::QuestInfo& questinfo() const;
  PROTOBUF_NODISCARD ::Protocol::QuestInfo* release_questinfo();
  ::Protocol::QuestInfo* mutable_questinfo();
  void set_allocated_questinfo(::Protocol::QuestInfo* questinfo);
  private:
  const ::Protocol::QuestInfo& _internal_questinfo() const;
  ::Protocol::QuestInfo* _internal_mutable_questinfo();
  public:
  void unsafe_arena_set_allocated_questinfo(
      ::Protocol::QuestInfo* questinfo);
  ::Protocol::QuestInfo* unsafe_arena_release_questinfo();

  // @@protoc_insertion_point(class_scope:Protocol.C_QuestList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::QuestInfo* questinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_QuestList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_QuestList) */ {
 public:
  inline S_QuestList() : S_QuestList(nullptr) {}
  ~S_QuestList() override;
  explicit PROTOBUF_CONSTEXPR S_QuestList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_QuestList(const S_QuestList& from);
  S_QuestList(S_QuestList&& from) noexcept
    : S_QuestList() {
    *this = ::std::move(from);
  }

  inline S_QuestList& operator=(const S_QuestList& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_QuestList& operator=(S_QuestList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_QuestList& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_QuestList* internal_default_instance() {
    return reinterpret_cast<const S_QuestList*>(
               &_S_QuestList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(S_QuestList& a, S_QuestList& b) {
    a.Swap(&b);
  }
  inline void Swap(S_QuestList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_QuestList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_QuestList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_QuestList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_QuestList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_QuestList& from) {
    S_QuestList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_QuestList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_QuestList";
  }
  protected:
  explicit S_QuestList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestinfoFieldNumber = 1,
  };
  // .Protocol.QuestInfo questinfo = 1;
  bool has_questinfo() const;
  private:
  bool _internal_has_questinfo() const;
  public:
  void clear_questinfo();
  const ::Protocol::QuestInfo& questinfo() const;
  PROTOBUF_NODISCARD ::Protocol::QuestInfo* release_questinfo();
  ::Protocol::QuestInfo* mutable_questinfo();
  void set_allocated_questinfo(::Protocol::QuestInfo* questinfo);
  private:
  const ::Protocol::QuestInfo& _internal_questinfo() const;
  ::Protocol::QuestInfo* _internal_mutable_questinfo();
  public:
  void unsafe_arena_set_allocated_questinfo(
      ::Protocol::QuestInfo* questinfo);
  ::Protocol::QuestInfo* unsafe_arena_release_questinfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_QuestList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::QuestInfo* questinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_QuestState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_QuestState) */ {
 public:
  inline S_QuestState() : S_QuestState(nullptr) {}
  ~S_QuestState() override;
  explicit PROTOBUF_CONSTEXPR S_QuestState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_QuestState(const S_QuestState& from);
  S_QuestState(S_QuestState&& from) noexcept
    : S_QuestState() {
    *this = ::std::move(from);
  }

  inline S_QuestState& operator=(const S_QuestState& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_QuestState& operator=(S_QuestState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_QuestState& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_QuestState* internal_default_instance() {
    return reinterpret_cast<const S_QuestState*>(
               &_S_QuestState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(S_QuestState& a, S_QuestState& b) {
    a.Swap(&b);
  }
  inline void Swap(S_QuestState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_QuestState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_QuestState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_QuestState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_QuestState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_QuestState& from) {
    S_QuestState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_QuestState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_QuestState";
  }
  protected:
  explicit S_QuestState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestinfoFieldNumber = 1,
  };
  // .Protocol.QuestInfo questinfo = 1;
  bool has_questinfo() const;
  private:
  bool _internal_has_questinfo() const;
  public:
  void clear_questinfo();
  const ::Protocol::QuestInfo& questinfo() const;
  PROTOBUF_NODISCARD ::Protocol::QuestInfo* release_questinfo();
  ::Protocol::QuestInfo* mutable_questinfo();
  void set_allocated_questinfo(::Protocol::QuestInfo* questinfo);
  private:
  const ::Protocol::QuestInfo& _internal_questinfo() const;
  ::Protocol::QuestInfo* _internal_mutable_questinfo();
  public:
  void unsafe_arena_set_allocated_questinfo(
      ::Protocol::QuestInfo* questinfo);
  ::Protocol::QuestInfo* unsafe_arena_release_questinfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_QuestState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::QuestInfo* questinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_Reset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_Reset) */ {
 public:
  inline S_Reset() : S_Reset(nullptr) {}
  ~S_Reset() override;
  explicit PROTOBUF_CONSTEXPR S_Reset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Reset(const S_Reset& from);
  S_Reset(S_Reset&& from) noexcept
    : S_Reset() {
    *this = ::std::move(from);
  }

  inline S_Reset& operator=(const S_Reset& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Reset& operator=(S_Reset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Reset& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Reset* internal_default_instance() {
    return reinterpret_cast<const S_Reset*>(
               &_S_Reset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(S_Reset& a, S_Reset& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Reset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Reset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Reset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Reset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Reset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_Reset& from) {
    S_Reset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Reset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_Reset";
  }
  protected:
  explicit S_Reset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectinfoFieldNumber = 1,
  };
  // .Protocol.ObjectInfo objectinfo = 1;
  bool has_objectinfo() const;
  private:
  bool _internal_has_objectinfo() const;
  public:
  void clear_objectinfo();
  const ::Protocol::ObjectInfo& objectinfo() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_objectinfo();
  ::Protocol::ObjectInfo* mutable_objectinfo();
  void set_allocated_objectinfo(::Protocol::ObjectInfo* objectinfo);
  private:
  const ::Protocol::ObjectInfo& _internal_objectinfo() const;
  ::Protocol::ObjectInfo* _internal_mutable_objectinfo();
  public:
  void unsafe_arena_set_allocated_objectinfo(
      ::Protocol::ObjectInfo* objectinfo);
  ::Protocol::ObjectInfo* unsafe_arena_release_objectinfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_Reset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* objectinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_Heal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_Heal) */ {
 public:
  inline C_Heal() : C_Heal(nullptr) {}
  ~C_Heal() override;
  explicit PROTOBUF_CONSTEXPR C_Heal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Heal(const C_Heal& from);
  C_Heal(C_Heal&& from) noexcept
    : C_Heal() {
    *this = ::std::move(from);
  }

  inline C_Heal& operator=(const C_Heal& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Heal& operator=(C_Heal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Heal& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Heal* internal_default_instance() {
    return reinterpret_cast<const C_Heal*>(
               &_C_Heal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(C_Heal& a, C_Heal& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Heal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Heal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Heal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Heal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Heal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_Heal& from) {
    C_Heal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Heal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_Heal";
  }
  protected:
  explicit C_Heal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
  };
  // uint64 objectId = 1;
  void clear_objectid();
  uint64_t objectid() const;
  void set_objectid(uint64_t value);
  private:
  uint64_t _internal_objectid() const;
  void _internal_set_objectid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_Heal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t objectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_AddItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_AddItem) */ {
 public:
  inline C_AddItem() : C_AddItem(nullptr) {}
  ~C_AddItem() override;
  explicit PROTOBUF_CONSTEXPR C_AddItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_AddItem(const C_AddItem& from);
  C_AddItem(C_AddItem&& from) noexcept
    : C_AddItem() {
    *this = ::std::move(from);
  }

  inline C_AddItem& operator=(const C_AddItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_AddItem& operator=(C_AddItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_AddItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_AddItem* internal_default_instance() {
    return reinterpret_cast<const C_AddItem*>(
               &_C_AddItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(C_AddItem& a, C_AddItem& b) {
    a.Swap(&b);
  }
  inline void Swap(C_AddItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_AddItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_AddItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_AddItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_AddItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_AddItem& from) {
    C_AddItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_AddItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_AddItem";
  }
  protected:
  explicit C_AddItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemInfoFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // .Protocol.ItemInfo ItemInfo = 1;
  bool has_iteminfo() const;
  private:
  bool _internal_has_iteminfo() const;
  public:
  void clear_iteminfo();
  const ::Protocol::ItemInfo& iteminfo() const;
  PROTOBUF_NODISCARD ::Protocol::ItemInfo* release_iteminfo();
  ::Protocol::ItemInfo* mutable_iteminfo();
  void set_allocated_iteminfo(::Protocol::ItemInfo* iteminfo);
  private:
  const ::Protocol::ItemInfo& _internal_iteminfo() const;
  ::Protocol::ItemInfo* _internal_mutable_iteminfo();
  public:
  void unsafe_arena_set_allocated_iteminfo(
      ::Protocol::ItemInfo* iteminfo);
  ::Protocol::ItemInfo* unsafe_arena_release_iteminfo();

  // uint32 index = 2;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_AddItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ItemInfo* iteminfo_;
    uint32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_EquipItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_EquipItem) */ {
 public:
  inline C_EquipItem() : C_EquipItem(nullptr) {}
  ~C_EquipItem() override;
  explicit PROTOBUF_CONSTEXPR C_EquipItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_EquipItem(const C_EquipItem& from);
  C_EquipItem(C_EquipItem&& from) noexcept
    : C_EquipItem() {
    *this = ::std::move(from);
  }

  inline C_EquipItem& operator=(const C_EquipItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_EquipItem& operator=(C_EquipItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_EquipItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_EquipItem* internal_default_instance() {
    return reinterpret_cast<const C_EquipItem*>(
               &_C_EquipItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(C_EquipItem& a, C_EquipItem& b) {
    a.Swap(&b);
  }
  inline void Swap(C_EquipItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_EquipItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_EquipItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_EquipItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_EquipItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_EquipItem& from) {
    C_EquipItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_EquipItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_EquipItem";
  }
  protected:
  explicit C_EquipItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kItemidFieldNumber = 2,
    kEquipFieldNumber = 3,
  };
  // uint64 objectId = 1;
  void clear_objectid();
  uint64_t objectid() const;
  void set_objectid(uint64_t value);
  private:
  uint64_t _internal_objectid() const;
  void _internal_set_objectid(uint64_t value);
  public:

  // uint32 itemid = 2;
  void clear_itemid();
  uint32_t itemid() const;
  void set_itemid(uint32_t value);
  private:
  uint32_t _internal_itemid() const;
  void _internal_set_itemid(uint32_t value);
  public:

  // bool equip = 3;
  void clear_equip();
  bool equip() const;
  void set_equip(bool value);
  private:
  bool _internal_equip() const;
  void _internal_set_equip(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_EquipItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t objectid_;
    uint32_t itemid_;
    bool equip_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_AddItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_AddItem) */ {
 public:
  inline S_AddItem() : S_AddItem(nullptr) {}
  ~S_AddItem() override;
  explicit PROTOBUF_CONSTEXPR S_AddItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_AddItem(const S_AddItem& from);
  S_AddItem(S_AddItem&& from) noexcept
    : S_AddItem() {
    *this = ::std::move(from);
  }

  inline S_AddItem& operator=(const S_AddItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_AddItem& operator=(S_AddItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_AddItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_AddItem* internal_default_instance() {
    return reinterpret_cast<const S_AddItem*>(
               &_S_AddItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(S_AddItem& a, S_AddItem& b) {
    a.Swap(&b);
  }
  inline void Swap(S_AddItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_AddItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_AddItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_AddItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_AddItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_AddItem& from) {
    S_AddItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_AddItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_AddItem";
  }
  protected:
  explicit S_AddItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kItemidFieldNumber = 2,
    kItemCountsFieldNumber = 3,
  };
  // uint64 objectId = 1;
  void clear_objectid();
  uint64_t objectid() const;
  void set_objectid(uint64_t value);
  private:
  uint64_t _internal_objectid() const;
  void _internal_set_objectid(uint64_t value);
  public:

  // uint32 itemid = 2;
  void clear_itemid();
  uint32_t itemid() const;
  void set_itemid(uint32_t value);
  private:
  uint32_t _internal_itemid() const;
  void _internal_set_itemid(uint32_t value);
  public:

  // uint32 itemCounts = 3;
  void clear_itemcounts();
  uint32_t itemcounts() const;
  void set_itemcounts(uint32_t value);
  private:
  uint32_t _internal_itemcounts() const;
  void _internal_set_itemcounts(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_AddItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t objectid_;
    uint32_t itemid_;
    uint32_t itemcounts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_EquipItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_EquipItem) */ {
 public:
  inline S_EquipItem() : S_EquipItem(nullptr) {}
  ~S_EquipItem() override;
  explicit PROTOBUF_CONSTEXPR S_EquipItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_EquipItem(const S_EquipItem& from);
  S_EquipItem(S_EquipItem&& from) noexcept
    : S_EquipItem() {
    *this = ::std::move(from);
  }

  inline S_EquipItem& operator=(const S_EquipItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_EquipItem& operator=(S_EquipItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_EquipItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_EquipItem* internal_default_instance() {
    return reinterpret_cast<const S_EquipItem*>(
               &_S_EquipItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(S_EquipItem& a, S_EquipItem& b) {
    a.Swap(&b);
  }
  inline void Swap(S_EquipItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_EquipItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_EquipItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_EquipItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_EquipItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_EquipItem& from) {
    S_EquipItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_EquipItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_EquipItem";
  }
  protected:
  explicit S_EquipItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kItemidFieldNumber = 2,
    kEquipFieldNumber = 3,
  };
  // uint64 objectId = 1;
  void clear_objectid();
  uint64_t objectid() const;
  void set_objectid(uint64_t value);
  private:
  uint64_t _internal_objectid() const;
  void _internal_set_objectid(uint64_t value);
  public:

  // uint32 itemid = 2;
  void clear_itemid();
  uint32_t itemid() const;
  void set_itemid(uint32_t value);
  private:
  uint32_t _internal_itemid() const;
  void _internal_set_itemid(uint32_t value);
  public:

  // bool equip = 3;
  void clear_equip();
  bool equip() const;
  void set_equip(bool value);
  private:
  bool _internal_equip() const;
  void _internal_set_equip(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_EquipItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t objectid_;
    uint32_t itemid_;
    bool equip_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ItemDrop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ItemDrop) */ {
 public:
  inline S_ItemDrop() : S_ItemDrop(nullptr) {}
  ~S_ItemDrop() override;
  explicit PROTOBUF_CONSTEXPR S_ItemDrop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ItemDrop(const S_ItemDrop& from);
  S_ItemDrop(S_ItemDrop&& from) noexcept
    : S_ItemDrop() {
    *this = ::std::move(from);
  }

  inline S_ItemDrop& operator=(const S_ItemDrop& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ItemDrop& operator=(S_ItemDrop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ItemDrop& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ItemDrop* internal_default_instance() {
    return reinterpret_cast<const S_ItemDrop*>(
               &_S_ItemDrop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(S_ItemDrop& a, S_ItemDrop& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ItemDrop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ItemDrop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ItemDrop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ItemDrop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ItemDrop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ItemDrop& from) {
    S_ItemDrop::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ItemDrop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ItemDrop";
  }
  protected:
  explicit S_ItemDrop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemInfoFieldNumber = 1,
  };
  // .Protocol.ItemInfo itemInfo = 1;
  bool has_iteminfo() const;
  private:
  bool _internal_has_iteminfo() const;
  public:
  void clear_iteminfo();
  const ::Protocol::ItemInfo& iteminfo() const;
  PROTOBUF_NODISCARD ::Protocol::ItemInfo* release_iteminfo();
  ::Protocol::ItemInfo* mutable_iteminfo();
  void set_allocated_iteminfo(::Protocol::ItemInfo* iteminfo);
  private:
  const ::Protocol::ItemInfo& _internal_iteminfo() const;
  ::Protocol::ItemInfo* _internal_mutable_iteminfo();
  public:
  void unsafe_arena_set_allocated_iteminfo(
      ::Protocol::ItemInfo* iteminfo);
  ::Protocol::ItemInfo* unsafe_arena_release_iteminfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_ItemDrop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ItemInfo* iteminfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// S_TEST

// uint64 id = 1;
inline void S_TEST::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t S_TEST::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t S_TEST::id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_TEST.id)
  return _internal_id();
}
inline void S_TEST::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void S_TEST::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_TEST.id)
}

// uint32 hp = 2;
inline void S_TEST::clear_hp() {
  _impl_.hp_ = 0u;
}
inline uint32_t S_TEST::_internal_hp() const {
  return _impl_.hp_;
}
inline uint32_t S_TEST::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.S_TEST.hp)
  return _internal_hp();
}
inline void S_TEST::_internal_set_hp(uint32_t value) {
  
  _impl_.hp_ = value;
}
inline void S_TEST::set_hp(uint32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.S_TEST.hp)
}

// uint32 attack = 3;
inline void S_TEST::clear_attack() {
  _impl_.attack_ = 0u;
}
inline uint32_t S_TEST::_internal_attack() const {
  return _impl_.attack_;
}
inline uint32_t S_TEST::attack() const {
  // @@protoc_insertion_point(field_get:Protocol.S_TEST.attack)
  return _internal_attack();
}
inline void S_TEST::_internal_set_attack(uint32_t value) {
  
  _impl_.attack_ = value;
}
inline void S_TEST::set_attack(uint32_t value) {
  _internal_set_attack(value);
  // @@protoc_insertion_point(field_set:Protocol.S_TEST.attack)
}

// repeated .Protocol.BuffData buffs = 4;
inline int S_TEST::_internal_buffs_size() const {
  return _impl_.buffs_.size();
}
inline int S_TEST::buffs_size() const {
  return _internal_buffs_size();
}
inline ::Protocol::BuffData* S_TEST::mutable_buffs(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_TEST.buffs)
  return _impl_.buffs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::BuffData >*
S_TEST::mutable_buffs() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_TEST.buffs)
  return &_impl_.buffs_;
}
inline const ::Protocol::BuffData& S_TEST::_internal_buffs(int index) const {
  return _impl_.buffs_.Get(index);
}
inline const ::Protocol::BuffData& S_TEST::buffs(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_TEST.buffs)
  return _internal_buffs(index);
}
inline ::Protocol::BuffData* S_TEST::_internal_add_buffs() {
  return _impl_.buffs_.Add();
}
inline ::Protocol::BuffData* S_TEST::add_buffs() {
  ::Protocol::BuffData* _add = _internal_add_buffs();
  // @@protoc_insertion_point(field_add:Protocol.S_TEST.buffs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::BuffData >&
S_TEST::buffs() const {
  // @@protoc_insertion_point(field_list:Protocol.S_TEST.buffs)
  return _impl_.buffs_;
}

// -------------------------------------------------------------------

// S_EnterGame

// bool success = 1;
inline void S_EnterGame::clear_success() {
  _impl_.success_ = false;
}
inline bool S_EnterGame::_internal_success() const {
  return _impl_.success_;
}
inline bool S_EnterGame::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_EnterGame.success)
  return _internal_success();
}
inline void S_EnterGame::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_EnterGame::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_EnterGame.success)
}

// uint64 accountId = 2;
inline void S_EnterGame::clear_accountid() {
  _impl_.accountid_ = uint64_t{0u};
}
inline uint64_t S_EnterGame::_internal_accountid() const {
  return _impl_.accountid_;
}
inline uint64_t S_EnterGame::accountid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_EnterGame.accountId)
  return _internal_accountid();
}
inline void S_EnterGame::_internal_set_accountid(uint64_t value) {
  
  _impl_.accountid_ = value;
}
inline void S_EnterGame::set_accountid(uint64_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_EnterGame.accountId)
}

// -------------------------------------------------------------------

// C_LeaveGame

// bool success = 1;
inline void C_LeaveGame::clear_success() {
  _impl_.success_ = false;
}
inline bool C_LeaveGame::_internal_success() const {
  return _impl_.success_;
}
inline bool C_LeaveGame::success() const {
  // @@protoc_insertion_point(field_get:Protocol.C_LeaveGame.success)
  return _internal_success();
}
inline void C_LeaveGame::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void C_LeaveGame::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.C_LeaveGame.success)
}

// uint64 accountId = 2;
inline void C_LeaveGame::clear_accountid() {
  _impl_.accountid_ = uint64_t{0u};
}
inline uint64_t C_LeaveGame::_internal_accountid() const {
  return _impl_.accountid_;
}
inline uint64_t C_LeaveGame::accountid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_LeaveGame.accountId)
  return _internal_accountid();
}
inline void C_LeaveGame::_internal_set_accountid(uint64_t value) {
  
  _impl_.accountid_ = value;
}
inline void C_LeaveGame::set_accountid(uint64_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_LeaveGame.accountId)
}

// -------------------------------------------------------------------

// S_MyPlayer

// .Protocol.ObjectInfo info = 1;
inline bool S_MyPlayer::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool S_MyPlayer::has_info() const {
  return _internal_has_info();
}
inline const ::Protocol::ObjectInfo& S_MyPlayer::_internal_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_MyPlayer::info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MyPlayer.info)
  return _internal_info();
}
inline void S_MyPlayer::unsafe_arena_set_allocated_info(
    ::Protocol::ObjectInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_MyPlayer.info)
}
inline ::Protocol::ObjectInfo* S_MyPlayer::release_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_MyPlayer::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_MyPlayer.info)
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_MyPlayer::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Protocol::ObjectInfo* S_MyPlayer::mutable_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_MyPlayer.info)
  return _msg;
}
inline void S_MyPlayer::set_allocated_info(::Protocol::ObjectInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_MyPlayer.info)
}

// bool revive = 2;
inline void S_MyPlayer::clear_revive() {
  _impl_.revive_ = false;
}
inline bool S_MyPlayer::_internal_revive() const {
  return _impl_.revive_;
}
inline bool S_MyPlayer::revive() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MyPlayer.revive)
  return _internal_revive();
}
inline void S_MyPlayer::_internal_set_revive(bool value) {
  
  _impl_.revive_ = value;
}
inline void S_MyPlayer::set_revive(bool value) {
  _internal_set_revive(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MyPlayer.revive)
}

// -------------------------------------------------------------------

// S_AddObject

// repeated .Protocol.ObjectInfo objects = 1;
inline int S_AddObject::_internal_objects_size() const {
  return _impl_.objects_.size();
}
inline int S_AddObject::objects_size() const {
  return _internal_objects_size();
}
inline ::Protocol::ObjectInfo* S_AddObject::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_AddObject.objects)
  return _impl_.objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
S_AddObject::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_AddObject.objects)
  return &_impl_.objects_;
}
inline const ::Protocol::ObjectInfo& S_AddObject::_internal_objects(int index) const {
  return _impl_.objects_.Get(index);
}
inline const ::Protocol::ObjectInfo& S_AddObject::objects(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_AddObject.objects)
  return _internal_objects(index);
}
inline ::Protocol::ObjectInfo* S_AddObject::_internal_add_objects() {
  return _impl_.objects_.Add();
}
inline ::Protocol::ObjectInfo* S_AddObject::add_objects() {
  ::Protocol::ObjectInfo* _add = _internal_add_objects();
  // @@protoc_insertion_point(field_add:Protocol.S_AddObject.objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
S_AddObject::objects() const {
  // @@protoc_insertion_point(field_list:Protocol.S_AddObject.objects)
  return _impl_.objects_;
}

// -------------------------------------------------------------------

// S_RemoveObject

// repeated uint64 ids = 1;
inline int S_RemoveObject::_internal_ids_size() const {
  return _impl_.ids_.size();
}
inline int S_RemoveObject::ids_size() const {
  return _internal_ids_size();
}
inline void S_RemoveObject::clear_ids() {
  _impl_.ids_.Clear();
}
inline uint64_t S_RemoveObject::_internal_ids(int index) const {
  return _impl_.ids_.Get(index);
}
inline uint64_t S_RemoveObject::ids(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_RemoveObject.ids)
  return _internal_ids(index);
}
inline void S_RemoveObject::set_ids(int index, uint64_t value) {
  _impl_.ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S_RemoveObject.ids)
}
inline void S_RemoveObject::_internal_add_ids(uint64_t value) {
  _impl_.ids_.Add(value);
}
inline void S_RemoveObject::add_ids(uint64_t value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:Protocol.S_RemoveObject.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
S_RemoveObject::_internal_ids() const {
  return _impl_.ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
S_RemoveObject::ids() const {
  // @@protoc_insertion_point(field_list:Protocol.S_RemoveObject.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
S_RemoveObject::_internal_mutable_ids() {
  return &_impl_.ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
S_RemoveObject::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_RemoveObject.ids)
  return _internal_mutable_ids();
}

// -------------------------------------------------------------------

// C_RemoveObject

// uint64 id = 1;
inline void C_RemoveObject::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t C_RemoveObject::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t C_RemoveObject::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_RemoveObject.id)
  return _internal_id();
}
inline void C_RemoveObject::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void C_RemoveObject::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C_RemoveObject.id)
}

// -------------------------------------------------------------------

// C_Move

// .Protocol.ObjectInfo info = 1;
inline bool C_Move::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool C_Move::has_info() const {
  return _internal_has_info();
}
inline const ::Protocol::ObjectInfo& C_Move::_internal_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& C_Move::info() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Move.info)
  return _internal_info();
}
inline void C_Move::unsafe_arena_set_allocated_info(
    ::Protocol::ObjectInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_Move.info)
}
inline ::Protocol::ObjectInfo* C_Move::release_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* C_Move::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Protocol.C_Move.info)
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* C_Move::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Protocol::ObjectInfo* C_Move::mutable_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.C_Move.info)
  return _msg;
}
inline void C_Move::set_allocated_info(::Protocol::ObjectInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_Move.info)
}

// -------------------------------------------------------------------

// S_Move

// .Protocol.ObjectInfo info = 1;
inline bool S_Move::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool S_Move::has_info() const {
  return _internal_has_info();
}
inline const ::Protocol::ObjectInfo& S_Move::_internal_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_Move::info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Move.info)
  return _internal_info();
}
inline void S_Move::unsafe_arena_set_allocated_info(
    ::Protocol::ObjectInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_Move.info)
}
inline ::Protocol::ObjectInfo* S_Move::release_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_Move::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_Move.info)
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_Move::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Protocol::ObjectInfo* S_Move::mutable_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_Move.info)
  return _msg;
}
inline void S_Move::set_allocated_info(::Protocol::ObjectInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_Move.info)
}

// -------------------------------------------------------------------

// C_Fire

// .Protocol.ObjectInfo info = 1;
inline bool C_Fire::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool C_Fire::has_info() const {
  return _internal_has_info();
}
inline const ::Protocol::ObjectInfo& C_Fire::_internal_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& C_Fire::info() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Fire.info)
  return _internal_info();
}
inline void C_Fire::unsafe_arena_set_allocated_info(
    ::Protocol::ObjectInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_Fire.info)
}
inline ::Protocol::ObjectInfo* C_Fire::release_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* C_Fire::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Protocol.C_Fire.info)
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* C_Fire::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Protocol::ObjectInfo* C_Fire::mutable_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.C_Fire.info)
  return _msg;
}
inline void C_Fire::set_allocated_info(::Protocol::ObjectInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_Fire.info)
}

// uint64 ownerid = 2;
inline void C_Fire::clear_ownerid() {
  _impl_.ownerid_ = uint64_t{0u};
}
inline uint64_t C_Fire::_internal_ownerid() const {
  return _impl_.ownerid_;
}
inline uint64_t C_Fire::ownerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Fire.ownerid)
  return _internal_ownerid();
}
inline void C_Fire::_internal_set_ownerid(uint64_t value) {
  
  _impl_.ownerid_ = value;
}
inline void C_Fire::set_ownerid(uint64_t value) {
  _internal_set_ownerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_Fire.ownerid)
}

// uint64 tick = 3;
inline void C_Fire::clear_tick() {
  _impl_.tick_ = uint64_t{0u};
}
inline uint64_t C_Fire::_internal_tick() const {
  return _impl_.tick_;
}
inline uint64_t C_Fire::tick() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Fire.tick)
  return _internal_tick();
}
inline void C_Fire::_internal_set_tick(uint64_t value) {
  
  _impl_.tick_ = value;
}
inline void C_Fire::set_tick(uint64_t value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:Protocol.C_Fire.tick)
}

// -------------------------------------------------------------------

// S_Fire

// .Protocol.ObjectInfo info = 1;
inline bool S_Fire::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool S_Fire::has_info() const {
  return _internal_has_info();
}
inline const ::Protocol::ObjectInfo& S_Fire::_internal_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_Fire::info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Fire.info)
  return _internal_info();
}
inline void S_Fire::unsafe_arena_set_allocated_info(
    ::Protocol::ObjectInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_Fire.info)
}
inline ::Protocol::ObjectInfo* S_Fire::release_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_Fire::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_Fire.info)
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_Fire::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Protocol::ObjectInfo* S_Fire::mutable_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_Fire.info)
  return _msg;
}
inline void S_Fire::set_allocated_info(::Protocol::ObjectInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_Fire.info)
}

// uint64 ownerid = 2;
inline void S_Fire::clear_ownerid() {
  _impl_.ownerid_ = uint64_t{0u};
}
inline uint64_t S_Fire::_internal_ownerid() const {
  return _impl_.ownerid_;
}
inline uint64_t S_Fire::ownerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Fire.ownerid)
  return _internal_ownerid();
}
inline void S_Fire::_internal_set_ownerid(uint64_t value) {
  
  _impl_.ownerid_ = value;
}
inline void S_Fire::set_ownerid(uint64_t value) {
  _internal_set_ownerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_Fire.ownerid)
}

// uint64 tick = 3;
inline void S_Fire::clear_tick() {
  _impl_.tick_ = uint64_t{0u};
}
inline uint64_t S_Fire::_internal_tick() const {
  return _impl_.tick_;
}
inline uint64_t S_Fire::tick() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Fire.tick)
  return _internal_tick();
}
inline void S_Fire::_internal_set_tick(uint64_t value) {
  
  _impl_.tick_ = value;
}
inline void S_Fire::set_tick(uint64_t value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:Protocol.S_Fire.tick)
}

// -------------------------------------------------------------------

// S_Hit

// uint64 objectid = 1;
inline void S_Hit::clear_objectid() {
  _impl_.objectid_ = uint64_t{0u};
}
inline uint64_t S_Hit::_internal_objectid() const {
  return _impl_.objectid_;
}
inline uint64_t S_Hit::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Hit.objectid)
  return _internal_objectid();
}
inline void S_Hit::_internal_set_objectid(uint64_t value) {
  
  _impl_.objectid_ = value;
}
inline void S_Hit::set_objectid(uint64_t value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_Hit.objectid)
}

// uint64 attackerid = 2;
inline void S_Hit::clear_attackerid() {
  _impl_.attackerid_ = uint64_t{0u};
}
inline uint64_t S_Hit::_internal_attackerid() const {
  return _impl_.attackerid_;
}
inline uint64_t S_Hit::attackerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Hit.attackerid)
  return _internal_attackerid();
}
inline void S_Hit::_internal_set_attackerid(uint64_t value) {
  
  _impl_.attackerid_ = value;
}
inline void S_Hit::set_attackerid(uint64_t value) {
  _internal_set_attackerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_Hit.attackerid)
}

// int32 damage = 3;
inline void S_Hit::clear_damage() {
  _impl_.damage_ = 0;
}
inline int32_t S_Hit::_internal_damage() const {
  return _impl_.damage_;
}
inline int32_t S_Hit::damage() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Hit.damage)
  return _internal_damage();
}
inline void S_Hit::_internal_set_damage(int32_t value) {
  
  _impl_.damage_ = value;
}
inline void S_Hit::set_damage(int32_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:Protocol.S_Hit.damage)
}

// -------------------------------------------------------------------

// C_Hit

// uint64 objectid = 1;
inline void C_Hit::clear_objectid() {
  _impl_.objectid_ = uint64_t{0u};
}
inline uint64_t C_Hit::_internal_objectid() const {
  return _impl_.objectid_;
}
inline uint64_t C_Hit::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Hit.objectid)
  return _internal_objectid();
}
inline void C_Hit::_internal_set_objectid(uint64_t value) {
  
  _impl_.objectid_ = value;
}
inline void C_Hit::set_objectid(uint64_t value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_Hit.objectid)
}

// uint64 attackerid = 2;
inline void C_Hit::clear_attackerid() {
  _impl_.attackerid_ = uint64_t{0u};
}
inline uint64_t C_Hit::_internal_attackerid() const {
  return _impl_.attackerid_;
}
inline uint64_t C_Hit::attackerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Hit.attackerid)
  return _internal_attackerid();
}
inline void C_Hit::_internal_set_attackerid(uint64_t value) {
  
  _impl_.attackerid_ = value;
}
inline void C_Hit::set_attackerid(uint64_t value) {
  _internal_set_attackerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_Hit.attackerid)
}

// -------------------------------------------------------------------

// S_MPRecover

// uint64 objectid = 1;
inline void S_MPRecover::clear_objectid() {
  _impl_.objectid_ = uint64_t{0u};
}
inline uint64_t S_MPRecover::_internal_objectid() const {
  return _impl_.objectid_;
}
inline uint64_t S_MPRecover::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MPRecover.objectid)
  return _internal_objectid();
}
inline void S_MPRecover::_internal_set_objectid(uint64_t value) {
  
  _impl_.objectid_ = value;
}
inline void S_MPRecover::set_objectid(uint64_t value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MPRecover.objectid)
}

// uint64 mp = 2;
inline void S_MPRecover::clear_mp() {
  _impl_.mp_ = uint64_t{0u};
}
inline uint64_t S_MPRecover::_internal_mp() const {
  return _impl_.mp_;
}
inline uint64_t S_MPRecover::mp() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MPRecover.mp)
  return _internal_mp();
}
inline void S_MPRecover::_internal_set_mp(uint64_t value) {
  
  _impl_.mp_ = value;
}
inline void S_MPRecover::set_mp(uint64_t value) {
  _internal_set_mp(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MPRecover.mp)
}

// -------------------------------------------------------------------

// C_SendMessage

// .Protocol.Text texts = 1;
inline bool C_SendMessage::_internal_has_texts() const {
  return this != internal_default_instance() && _impl_.texts_ != nullptr;
}
inline bool C_SendMessage::has_texts() const {
  return _internal_has_texts();
}
inline const ::Protocol::Text& C_SendMessage::_internal_texts() const {
  const ::Protocol::Text* p = _impl_.texts_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Text&>(
      ::Protocol::_Text_default_instance_);
}
inline const ::Protocol::Text& C_SendMessage::texts() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SendMessage.texts)
  return _internal_texts();
}
inline void C_SendMessage::unsafe_arena_set_allocated_texts(
    ::Protocol::Text* texts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.texts_);
  }
  _impl_.texts_ = texts;
  if (texts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_SendMessage.texts)
}
inline ::Protocol::Text* C_SendMessage::release_texts() {
  
  ::Protocol::Text* temp = _impl_.texts_;
  _impl_.texts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Text* C_SendMessage::unsafe_arena_release_texts() {
  // @@protoc_insertion_point(field_release:Protocol.C_SendMessage.texts)
  
  ::Protocol::Text* temp = _impl_.texts_;
  _impl_.texts_ = nullptr;
  return temp;
}
inline ::Protocol::Text* C_SendMessage::_internal_mutable_texts() {
  
  if (_impl_.texts_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Text>(GetArenaForAllocation());
    _impl_.texts_ = p;
  }
  return _impl_.texts_;
}
inline ::Protocol::Text* C_SendMessage::mutable_texts() {
  ::Protocol::Text* _msg = _internal_mutable_texts();
  // @@protoc_insertion_point(field_mutable:Protocol.C_SendMessage.texts)
  return _msg;
}
inline void C_SendMessage::set_allocated_texts(::Protocol::Text* texts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.texts_);
  }
  if (texts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(texts));
    if (message_arena != submessage_arena) {
      texts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, texts, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.texts_ = texts;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SendMessage.texts)
}

// -------------------------------------------------------------------

// S_SendMessage

// .Protocol.Text texts = 1;
inline bool S_SendMessage::_internal_has_texts() const {
  return this != internal_default_instance() && _impl_.texts_ != nullptr;
}
inline bool S_SendMessage::has_texts() const {
  return _internal_has_texts();
}
inline const ::Protocol::Text& S_SendMessage::_internal_texts() const {
  const ::Protocol::Text* p = _impl_.texts_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Text&>(
      ::Protocol::_Text_default_instance_);
}
inline const ::Protocol::Text& S_SendMessage::texts() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SendMessage.texts)
  return _internal_texts();
}
inline void S_SendMessage::unsafe_arena_set_allocated_texts(
    ::Protocol::Text* texts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.texts_);
  }
  _impl_.texts_ = texts;
  if (texts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SendMessage.texts)
}
inline ::Protocol::Text* S_SendMessage::release_texts() {
  
  ::Protocol::Text* temp = _impl_.texts_;
  _impl_.texts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Text* S_SendMessage::unsafe_arena_release_texts() {
  // @@protoc_insertion_point(field_release:Protocol.S_SendMessage.texts)
  
  ::Protocol::Text* temp = _impl_.texts_;
  _impl_.texts_ = nullptr;
  return temp;
}
inline ::Protocol::Text* S_SendMessage::_internal_mutable_texts() {
  
  if (_impl_.texts_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Text>(GetArenaForAllocation());
    _impl_.texts_ = p;
  }
  return _impl_.texts_;
}
inline ::Protocol::Text* S_SendMessage::mutable_texts() {
  ::Protocol::Text* _msg = _internal_mutable_texts();
  // @@protoc_insertion_point(field_mutable:Protocol.S_SendMessage.texts)
  return _msg;
}
inline void S_SendMessage::set_allocated_texts(::Protocol::Text* texts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.texts_);
  }
  if (texts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(texts));
    if (message_arena != submessage_arena) {
      texts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, texts, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.texts_ = texts;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SendMessage.texts)
}

// -------------------------------------------------------------------

// C_Revive

// .Protocol.ObjectInfo info = 1;
inline bool C_Revive::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool C_Revive::has_info() const {
  return _internal_has_info();
}
inline const ::Protocol::ObjectInfo& C_Revive::_internal_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& C_Revive::info() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Revive.info)
  return _internal_info();
}
inline void C_Revive::unsafe_arena_set_allocated_info(
    ::Protocol::ObjectInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_Revive.info)
}
inline ::Protocol::ObjectInfo* C_Revive::release_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* C_Revive::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Protocol.C_Revive.info)
  
  ::Protocol::ObjectInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* C_Revive::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Protocol::ObjectInfo* C_Revive::mutable_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.C_Revive.info)
  return _msg;
}
inline void C_Revive::set_allocated_info(::Protocol::ObjectInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_Revive.info)
}

// -------------------------------------------------------------------

// C_SyncInventory

// uint64 objectId = 1;
inline void C_SyncInventory::clear_objectid() {
  _impl_.objectid_ = uint64_t{0u};
}
inline uint64_t C_SyncInventory::_internal_objectid() const {
  return _impl_.objectid_;
}
inline uint64_t C_SyncInventory::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SyncInventory.objectId)
  return _internal_objectid();
}
inline void C_SyncInventory::_internal_set_objectid(uint64_t value) {
  
  _impl_.objectid_ = value;
}
inline void C_SyncInventory::set_objectid(uint64_t value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SyncInventory.objectId)
}

// -------------------------------------------------------------------

// C_Teleport

// uint64 objectId = 1;
inline void C_Teleport::clear_objectid() {
  _impl_.objectid_ = uint64_t{0u};
}
inline uint64_t C_Teleport::_internal_objectid() const {
  return _impl_.objectid_;
}
inline uint64_t C_Teleport::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Teleport.objectId)
  return _internal_objectid();
}
inline void C_Teleport::_internal_set_objectid(uint64_t value) {
  
  _impl_.objectid_ = value;
}
inline void C_Teleport::set_objectid(uint64_t value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_Teleport.objectId)
}

// -------------------------------------------------------------------

// S_Teleport

// uint64 objectId = 1;
inline void S_Teleport::clear_objectid() {
  _impl_.objectid_ = uint64_t{0u};
}
inline uint64_t S_Teleport::_internal_objectid() const {
  return _impl_.objectid_;
}
inline uint64_t S_Teleport::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Teleport.objectId)
  return _internal_objectid();
}
inline void S_Teleport::_internal_set_objectid(uint64_t value) {
  
  _impl_.objectid_ = value;
}
inline void S_Teleport::set_objectid(uint64_t value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_Teleport.objectId)
}

// int32 posX = 2;
inline void S_Teleport::clear_posx() {
  _impl_.posx_ = 0;
}
inline int32_t S_Teleport::_internal_posx() const {
  return _impl_.posx_;
}
inline int32_t S_Teleport::posx() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Teleport.posX)
  return _internal_posx();
}
inline void S_Teleport::_internal_set_posx(int32_t value) {
  
  _impl_.posx_ = value;
}
inline void S_Teleport::set_posx(int32_t value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:Protocol.S_Teleport.posX)
}

// int32 posY = 3;
inline void S_Teleport::clear_posy() {
  _impl_.posy_ = 0;
}
inline int32_t S_Teleport::_internal_posy() const {
  return _impl_.posy_;
}
inline int32_t S_Teleport::posy() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Teleport.posY)
  return _internal_posy();
}
inline void S_Teleport::_internal_set_posy(int32_t value) {
  
  _impl_.posy_ = value;
}
inline void S_Teleport::set_posy(int32_t value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:Protocol.S_Teleport.posY)
}

// -------------------------------------------------------------------

// S_Gold

// uint64 objectId = 1;
inline void S_Gold::clear_objectid() {
  _impl_.objectid_ = uint64_t{0u};
}
inline uint64_t S_Gold::_internal_objectid() const {
  return _impl_.objectid_;
}
inline uint64_t S_Gold::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Gold.objectId)
  return _internal_objectid();
}
inline void S_Gold::_internal_set_objectid(uint64_t value) {
  
  _impl_.objectid_ = value;
}
inline void S_Gold::set_objectid(uint64_t value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_Gold.objectId)
}

// int32 gold = 2;
inline void S_Gold::clear_gold() {
  _impl_.gold_ = 0;
}
inline int32_t S_Gold::_internal_gold() const {
  return _impl_.gold_;
}
inline int32_t S_Gold::gold() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Gold.gold)
  return _internal_gold();
}
inline void S_Gold::_internal_set_gold(int32_t value) {
  
  _impl_.gold_ = value;
}
inline void S_Gold::set_gold(int32_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:Protocol.S_Gold.gold)
}

// -------------------------------------------------------------------

// C_Quest

// uint64 objectId = 1;
inline void C_Quest::clear_objectid() {
  _impl_.objectid_ = uint64_t{0u};
}
inline uint64_t C_Quest::_internal_objectid() const {
  return _impl_.objectid_;
}
inline uint64_t C_Quest::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Quest.objectId)
  return _internal_objectid();
}
inline void C_Quest::_internal_set_objectid(uint64_t value) {
  
  _impl_.objectid_ = value;
}
inline void C_Quest::set_objectid(uint64_t value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_Quest.objectId)
}

// uint64 questId = 2;
inline void C_Quest::clear_questid() {
  _impl_.questid_ = uint64_t{0u};
}
inline uint64_t C_Quest::_internal_questid() const {
  return _impl_.questid_;
}
inline uint64_t C_Quest::questid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Quest.questId)
  return _internal_questid();
}
inline void C_Quest::_internal_set_questid(uint64_t value) {
  
  _impl_.questid_ = value;
}
inline void C_Quest::set_questid(uint64_t value) {
  _internal_set_questid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_Quest.questId)
}

// -------------------------------------------------------------------

// S_Quest

// .Protocol.QuestInfo questinfo = 1;
inline bool S_Quest::_internal_has_questinfo() const {
  return this != internal_default_instance() && _impl_.questinfo_ != nullptr;
}
inline bool S_Quest::has_questinfo() const {
  return _internal_has_questinfo();
}
inline const ::Protocol::QuestInfo& S_Quest::_internal_questinfo() const {
  const ::Protocol::QuestInfo* p = _impl_.questinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::QuestInfo&>(
      ::Protocol::_QuestInfo_default_instance_);
}
inline const ::Protocol::QuestInfo& S_Quest::questinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Quest.questinfo)
  return _internal_questinfo();
}
inline void S_Quest::unsafe_arena_set_allocated_questinfo(
    ::Protocol::QuestInfo* questinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.questinfo_);
  }
  _impl_.questinfo_ = questinfo;
  if (questinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_Quest.questinfo)
}
inline ::Protocol::QuestInfo* S_Quest::release_questinfo() {
  
  ::Protocol::QuestInfo* temp = _impl_.questinfo_;
  _impl_.questinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::QuestInfo* S_Quest::unsafe_arena_release_questinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_Quest.questinfo)
  
  ::Protocol::QuestInfo* temp = _impl_.questinfo_;
  _impl_.questinfo_ = nullptr;
  return temp;
}
inline ::Protocol::QuestInfo* S_Quest::_internal_mutable_questinfo() {
  
  if (_impl_.questinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::QuestInfo>(GetArenaForAllocation());
    _impl_.questinfo_ = p;
  }
  return _impl_.questinfo_;
}
inline ::Protocol::QuestInfo* S_Quest::mutable_questinfo() {
  ::Protocol::QuestInfo* _msg = _internal_mutable_questinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S_Quest.questinfo)
  return _msg;
}
inline void S_Quest::set_allocated_questinfo(::Protocol::QuestInfo* questinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.questinfo_);
  }
  if (questinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(questinfo));
    if (message_arena != submessage_arena) {
      questinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, questinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.questinfo_ = questinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_Quest.questinfo)
}

// -------------------------------------------------------------------

// S_QuestProcess

// .Protocol.QuestInfo questinfo = 1;
inline bool S_QuestProcess::_internal_has_questinfo() const {
  return this != internal_default_instance() && _impl_.questinfo_ != nullptr;
}
inline bool S_QuestProcess::has_questinfo() const {
  return _internal_has_questinfo();
}
inline const ::Protocol::QuestInfo& S_QuestProcess::_internal_questinfo() const {
  const ::Protocol::QuestInfo* p = _impl_.questinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::QuestInfo&>(
      ::Protocol::_QuestInfo_default_instance_);
}
inline const ::Protocol::QuestInfo& S_QuestProcess::questinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_QuestProcess.questinfo)
  return _internal_questinfo();
}
inline void S_QuestProcess::unsafe_arena_set_allocated_questinfo(
    ::Protocol::QuestInfo* questinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.questinfo_);
  }
  _impl_.questinfo_ = questinfo;
  if (questinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_QuestProcess.questinfo)
}
inline ::Protocol::QuestInfo* S_QuestProcess::release_questinfo() {
  
  ::Protocol::QuestInfo* temp = _impl_.questinfo_;
  _impl_.questinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::QuestInfo* S_QuestProcess::unsafe_arena_release_questinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_QuestProcess.questinfo)
  
  ::Protocol::QuestInfo* temp = _impl_.questinfo_;
  _impl_.questinfo_ = nullptr;
  return temp;
}
inline ::Protocol::QuestInfo* S_QuestProcess::_internal_mutable_questinfo() {
  
  if (_impl_.questinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::QuestInfo>(GetArenaForAllocation());
    _impl_.questinfo_ = p;
  }
  return _impl_.questinfo_;
}
inline ::Protocol::QuestInfo* S_QuestProcess::mutable_questinfo() {
  ::Protocol::QuestInfo* _msg = _internal_mutable_questinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S_QuestProcess.questinfo)
  return _msg;
}
inline void S_QuestProcess::set_allocated_questinfo(::Protocol::QuestInfo* questinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.questinfo_);
  }
  if (questinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(questinfo));
    if (message_arena != submessage_arena) {
      questinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, questinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.questinfo_ = questinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_QuestProcess.questinfo)
}

// -------------------------------------------------------------------

// S_QuestComplete

// .Protocol.QuestInfo questinfo = 1;
inline bool S_QuestComplete::_internal_has_questinfo() const {
  return this != internal_default_instance() && _impl_.questinfo_ != nullptr;
}
inline bool S_QuestComplete::has_questinfo() const {
  return _internal_has_questinfo();
}
inline const ::Protocol::QuestInfo& S_QuestComplete::_internal_questinfo() const {
  const ::Protocol::QuestInfo* p = _impl_.questinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::QuestInfo&>(
      ::Protocol::_QuestInfo_default_instance_);
}
inline const ::Protocol::QuestInfo& S_QuestComplete::questinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_QuestComplete.questinfo)
  return _internal_questinfo();
}
inline void S_QuestComplete::unsafe_arena_set_allocated_questinfo(
    ::Protocol::QuestInfo* questinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.questinfo_);
  }
  _impl_.questinfo_ = questinfo;
  if (questinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_QuestComplete.questinfo)
}
inline ::Protocol::QuestInfo* S_QuestComplete::release_questinfo() {
  
  ::Protocol::QuestInfo* temp = _impl_.questinfo_;
  _impl_.questinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::QuestInfo* S_QuestComplete::unsafe_arena_release_questinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_QuestComplete.questinfo)
  
  ::Protocol::QuestInfo* temp = _impl_.questinfo_;
  _impl_.questinfo_ = nullptr;
  return temp;
}
inline ::Protocol::QuestInfo* S_QuestComplete::_internal_mutable_questinfo() {
  
  if (_impl_.questinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::QuestInfo>(GetArenaForAllocation());
    _impl_.questinfo_ = p;
  }
  return _impl_.questinfo_;
}
inline ::Protocol::QuestInfo* S_QuestComplete::mutable_questinfo() {
  ::Protocol::QuestInfo* _msg = _internal_mutable_questinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S_QuestComplete.questinfo)
  return _msg;
}
inline void S_QuestComplete::set_allocated_questinfo(::Protocol::QuestInfo* questinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.questinfo_);
  }
  if (questinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(questinfo));
    if (message_arena != submessage_arena) {
      questinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, questinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.questinfo_ = questinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_QuestComplete.questinfo)
}

// -------------------------------------------------------------------

// C_QuestFinish

// uint64 objectId = 1;
inline void C_QuestFinish::clear_objectid() {
  _impl_.objectid_ = uint64_t{0u};
}
inline uint64_t C_QuestFinish::_internal_objectid() const {
  return _impl_.objectid_;
}
inline uint64_t C_QuestFinish::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_QuestFinish.objectId)
  return _internal_objectid();
}
inline void C_QuestFinish::_internal_set_objectid(uint64_t value) {
  
  _impl_.objectid_ = value;
}
inline void C_QuestFinish::set_objectid(uint64_t value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_QuestFinish.objectId)
}

// uint64 questId = 2;
inline void C_QuestFinish::clear_questid() {
  _impl_.questid_ = uint64_t{0u};
}
inline uint64_t C_QuestFinish::_internal_questid() const {
  return _impl_.questid_;
}
inline uint64_t C_QuestFinish::questid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_QuestFinish.questId)
  return _internal_questid();
}
inline void C_QuestFinish::_internal_set_questid(uint64_t value) {
  
  _impl_.questid_ = value;
}
inline void C_QuestFinish::set_questid(uint64_t value) {
  _internal_set_questid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_QuestFinish.questId)
}

// -------------------------------------------------------------------

// C_QuestList

// .Protocol.QuestInfo questinfo = 1;
inline bool C_QuestList::_internal_has_questinfo() const {
  return this != internal_default_instance() && _impl_.questinfo_ != nullptr;
}
inline bool C_QuestList::has_questinfo() const {
  return _internal_has_questinfo();
}
inline const ::Protocol::QuestInfo& C_QuestList::_internal_questinfo() const {
  const ::Protocol::QuestInfo* p = _impl_.questinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::QuestInfo&>(
      ::Protocol::_QuestInfo_default_instance_);
}
inline const ::Protocol::QuestInfo& C_QuestList::questinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.C_QuestList.questinfo)
  return _internal_questinfo();
}
inline void C_QuestList::unsafe_arena_set_allocated_questinfo(
    ::Protocol::QuestInfo* questinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.questinfo_);
  }
  _impl_.questinfo_ = questinfo;
  if (questinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_QuestList.questinfo)
}
inline ::Protocol::QuestInfo* C_QuestList::release_questinfo() {
  
  ::Protocol::QuestInfo* temp = _impl_.questinfo_;
  _impl_.questinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::QuestInfo* C_QuestList::unsafe_arena_release_questinfo() {
  // @@protoc_insertion_point(field_release:Protocol.C_QuestList.questinfo)
  
  ::Protocol::QuestInfo* temp = _impl_.questinfo_;
  _impl_.questinfo_ = nullptr;
  return temp;
}
inline ::Protocol::QuestInfo* C_QuestList::_internal_mutable_questinfo() {
  
  if (_impl_.questinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::QuestInfo>(GetArenaForAllocation());
    _impl_.questinfo_ = p;
  }
  return _impl_.questinfo_;
}
inline ::Protocol::QuestInfo* C_QuestList::mutable_questinfo() {
  ::Protocol::QuestInfo* _msg = _internal_mutable_questinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.C_QuestList.questinfo)
  return _msg;
}
inline void C_QuestList::set_allocated_questinfo(::Protocol::QuestInfo* questinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.questinfo_);
  }
  if (questinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(questinfo));
    if (message_arena != submessage_arena) {
      questinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, questinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.questinfo_ = questinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_QuestList.questinfo)
}

// -------------------------------------------------------------------

// S_QuestList

// .Protocol.QuestInfo questinfo = 1;
inline bool S_QuestList::_internal_has_questinfo() const {
  return this != internal_default_instance() && _impl_.questinfo_ != nullptr;
}
inline bool S_QuestList::has_questinfo() const {
  return _internal_has_questinfo();
}
inline const ::Protocol::QuestInfo& S_QuestList::_internal_questinfo() const {
  const ::Protocol::QuestInfo* p = _impl_.questinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::QuestInfo&>(
      ::Protocol::_QuestInfo_default_instance_);
}
inline const ::Protocol::QuestInfo& S_QuestList::questinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_QuestList.questinfo)
  return _internal_questinfo();
}
inline void S_QuestList::unsafe_arena_set_allocated_questinfo(
    ::Protocol::QuestInfo* questinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.questinfo_);
  }
  _impl_.questinfo_ = questinfo;
  if (questinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_QuestList.questinfo)
}
inline ::Protocol::QuestInfo* S_QuestList::release_questinfo() {
  
  ::Protocol::QuestInfo* temp = _impl_.questinfo_;
  _impl_.questinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::QuestInfo* S_QuestList::unsafe_arena_release_questinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_QuestList.questinfo)
  
  ::Protocol::QuestInfo* temp = _impl_.questinfo_;
  _impl_.questinfo_ = nullptr;
  return temp;
}
inline ::Protocol::QuestInfo* S_QuestList::_internal_mutable_questinfo() {
  
  if (_impl_.questinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::QuestInfo>(GetArenaForAllocation());
    _impl_.questinfo_ = p;
  }
  return _impl_.questinfo_;
}
inline ::Protocol::QuestInfo* S_QuestList::mutable_questinfo() {
  ::Protocol::QuestInfo* _msg = _internal_mutable_questinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S_QuestList.questinfo)
  return _msg;
}
inline void S_QuestList::set_allocated_questinfo(::Protocol::QuestInfo* questinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.questinfo_);
  }
  if (questinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(questinfo));
    if (message_arena != submessage_arena) {
      questinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, questinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.questinfo_ = questinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_QuestList.questinfo)
}

// -------------------------------------------------------------------

// S_QuestState

// .Protocol.QuestInfo questinfo = 1;
inline bool S_QuestState::_internal_has_questinfo() const {
  return this != internal_default_instance() && _impl_.questinfo_ != nullptr;
}
inline bool S_QuestState::has_questinfo() const {
  return _internal_has_questinfo();
}
inline const ::Protocol::QuestInfo& S_QuestState::_internal_questinfo() const {
  const ::Protocol::QuestInfo* p = _impl_.questinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::QuestInfo&>(
      ::Protocol::_QuestInfo_default_instance_);
}
inline const ::Protocol::QuestInfo& S_QuestState::questinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_QuestState.questinfo)
  return _internal_questinfo();
}
inline void S_QuestState::unsafe_arena_set_allocated_questinfo(
    ::Protocol::QuestInfo* questinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.questinfo_);
  }
  _impl_.questinfo_ = questinfo;
  if (questinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_QuestState.questinfo)
}
inline ::Protocol::QuestInfo* S_QuestState::release_questinfo() {
  
  ::Protocol::QuestInfo* temp = _impl_.questinfo_;
  _impl_.questinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::QuestInfo* S_QuestState::unsafe_arena_release_questinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_QuestState.questinfo)
  
  ::Protocol::QuestInfo* temp = _impl_.questinfo_;
  _impl_.questinfo_ = nullptr;
  return temp;
}
inline ::Protocol::QuestInfo* S_QuestState::_internal_mutable_questinfo() {
  
  if (_impl_.questinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::QuestInfo>(GetArenaForAllocation());
    _impl_.questinfo_ = p;
  }
  return _impl_.questinfo_;
}
inline ::Protocol::QuestInfo* S_QuestState::mutable_questinfo() {
  ::Protocol::QuestInfo* _msg = _internal_mutable_questinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S_QuestState.questinfo)
  return _msg;
}
inline void S_QuestState::set_allocated_questinfo(::Protocol::QuestInfo* questinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.questinfo_);
  }
  if (questinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(questinfo));
    if (message_arena != submessage_arena) {
      questinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, questinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.questinfo_ = questinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_QuestState.questinfo)
}

// -------------------------------------------------------------------

// S_Reset

// .Protocol.ObjectInfo objectinfo = 1;
inline bool S_Reset::_internal_has_objectinfo() const {
  return this != internal_default_instance() && _impl_.objectinfo_ != nullptr;
}
inline bool S_Reset::has_objectinfo() const {
  return _internal_has_objectinfo();
}
inline const ::Protocol::ObjectInfo& S_Reset::_internal_objectinfo() const {
  const ::Protocol::ObjectInfo* p = _impl_.objectinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_Reset::objectinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Reset.objectinfo)
  return _internal_objectinfo();
}
inline void S_Reset::unsafe_arena_set_allocated_objectinfo(
    ::Protocol::ObjectInfo* objectinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinfo_);
  }
  _impl_.objectinfo_ = objectinfo;
  if (objectinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_Reset.objectinfo)
}
inline ::Protocol::ObjectInfo* S_Reset::release_objectinfo() {
  
  ::Protocol::ObjectInfo* temp = _impl_.objectinfo_;
  _impl_.objectinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_Reset::unsafe_arena_release_objectinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_Reset.objectinfo)
  
  ::Protocol::ObjectInfo* temp = _impl_.objectinfo_;
  _impl_.objectinfo_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_Reset::_internal_mutable_objectinfo() {
  
  if (_impl_.objectinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.objectinfo_ = p;
  }
  return _impl_.objectinfo_;
}
inline ::Protocol::ObjectInfo* S_Reset::mutable_objectinfo() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_objectinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S_Reset.objectinfo)
  return _msg;
}
inline void S_Reset::set_allocated_objectinfo(::Protocol::ObjectInfo* objectinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinfo_);
  }
  if (objectinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinfo));
    if (message_arena != submessage_arena) {
      objectinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectinfo_ = objectinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_Reset.objectinfo)
}

// -------------------------------------------------------------------

// C_Heal

// uint64 objectId = 1;
inline void C_Heal::clear_objectid() {
  _impl_.objectid_ = uint64_t{0u};
}
inline uint64_t C_Heal::_internal_objectid() const {
  return _impl_.objectid_;
}
inline uint64_t C_Heal::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Heal.objectId)
  return _internal_objectid();
}
inline void C_Heal::_internal_set_objectid(uint64_t value) {
  
  _impl_.objectid_ = value;
}
inline void C_Heal::set_objectid(uint64_t value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_Heal.objectId)
}

// -------------------------------------------------------------------

// C_AddItem

// .Protocol.ItemInfo ItemInfo = 1;
inline bool C_AddItem::_internal_has_iteminfo() const {
  return this != internal_default_instance() && _impl_.iteminfo_ != nullptr;
}
inline bool C_AddItem::has_iteminfo() const {
  return _internal_has_iteminfo();
}
inline const ::Protocol::ItemInfo& C_AddItem::_internal_iteminfo() const {
  const ::Protocol::ItemInfo* p = _impl_.iteminfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ItemInfo&>(
      ::Protocol::_ItemInfo_default_instance_);
}
inline const ::Protocol::ItemInfo& C_AddItem::iteminfo() const {
  // @@protoc_insertion_point(field_get:Protocol.C_AddItem.ItemInfo)
  return _internal_iteminfo();
}
inline void C_AddItem::unsafe_arena_set_allocated_iteminfo(
    ::Protocol::ItemInfo* iteminfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.iteminfo_);
  }
  _impl_.iteminfo_ = iteminfo;
  if (iteminfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_AddItem.ItemInfo)
}
inline ::Protocol::ItemInfo* C_AddItem::release_iteminfo() {
  
  ::Protocol::ItemInfo* temp = _impl_.iteminfo_;
  _impl_.iteminfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ItemInfo* C_AddItem::unsafe_arena_release_iteminfo() {
  // @@protoc_insertion_point(field_release:Protocol.C_AddItem.ItemInfo)
  
  ::Protocol::ItemInfo* temp = _impl_.iteminfo_;
  _impl_.iteminfo_ = nullptr;
  return temp;
}
inline ::Protocol::ItemInfo* C_AddItem::_internal_mutable_iteminfo() {
  
  if (_impl_.iteminfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ItemInfo>(GetArenaForAllocation());
    _impl_.iteminfo_ = p;
  }
  return _impl_.iteminfo_;
}
inline ::Protocol::ItemInfo* C_AddItem::mutable_iteminfo() {
  ::Protocol::ItemInfo* _msg = _internal_mutable_iteminfo();
  // @@protoc_insertion_point(field_mutable:Protocol.C_AddItem.ItemInfo)
  return _msg;
}
inline void C_AddItem::set_allocated_iteminfo(::Protocol::ItemInfo* iteminfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.iteminfo_);
  }
  if (iteminfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iteminfo));
    if (message_arena != submessage_arena) {
      iteminfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iteminfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.iteminfo_ = iteminfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_AddItem.ItemInfo)
}

// uint32 index = 2;
inline void C_AddItem::clear_index() {
  _impl_.index_ = 0u;
}
inline uint32_t C_AddItem::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t C_AddItem::index() const {
  // @@protoc_insertion_point(field_get:Protocol.C_AddItem.index)
  return _internal_index();
}
inline void C_AddItem::_internal_set_index(uint32_t value) {
  
  _impl_.index_ = value;
}
inline void C_AddItem::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Protocol.C_AddItem.index)
}

// -------------------------------------------------------------------

// C_EquipItem

// uint64 objectId = 1;
inline void C_EquipItem::clear_objectid() {
  _impl_.objectid_ = uint64_t{0u};
}
inline uint64_t C_EquipItem::_internal_objectid() const {
  return _impl_.objectid_;
}
inline uint64_t C_EquipItem::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_EquipItem.objectId)
  return _internal_objectid();
}
inline void C_EquipItem::_internal_set_objectid(uint64_t value) {
  
  _impl_.objectid_ = value;
}
inline void C_EquipItem::set_objectid(uint64_t value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_EquipItem.objectId)
}

// uint32 itemid = 2;
inline void C_EquipItem::clear_itemid() {
  _impl_.itemid_ = 0u;
}
inline uint32_t C_EquipItem::_internal_itemid() const {
  return _impl_.itemid_;
}
inline uint32_t C_EquipItem::itemid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_EquipItem.itemid)
  return _internal_itemid();
}
inline void C_EquipItem::_internal_set_itemid(uint32_t value) {
  
  _impl_.itemid_ = value;
}
inline void C_EquipItem::set_itemid(uint32_t value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_EquipItem.itemid)
}

// bool equip = 3;
inline void C_EquipItem::clear_equip() {
  _impl_.equip_ = false;
}
inline bool C_EquipItem::_internal_equip() const {
  return _impl_.equip_;
}
inline bool C_EquipItem::equip() const {
  // @@protoc_insertion_point(field_get:Protocol.C_EquipItem.equip)
  return _internal_equip();
}
inline void C_EquipItem::_internal_set_equip(bool value) {
  
  _impl_.equip_ = value;
}
inline void C_EquipItem::set_equip(bool value) {
  _internal_set_equip(value);
  // @@protoc_insertion_point(field_set:Protocol.C_EquipItem.equip)
}

// -------------------------------------------------------------------

// S_AddItem

// uint64 objectId = 1;
inline void S_AddItem::clear_objectid() {
  _impl_.objectid_ = uint64_t{0u};
}
inline uint64_t S_AddItem::_internal_objectid() const {
  return _impl_.objectid_;
}
inline uint64_t S_AddItem::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_AddItem.objectId)
  return _internal_objectid();
}
inline void S_AddItem::_internal_set_objectid(uint64_t value) {
  
  _impl_.objectid_ = value;
}
inline void S_AddItem::set_objectid(uint64_t value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_AddItem.objectId)
}

// uint32 itemid = 2;
inline void S_AddItem::clear_itemid() {
  _impl_.itemid_ = 0u;
}
inline uint32_t S_AddItem::_internal_itemid() const {
  return _impl_.itemid_;
}
inline uint32_t S_AddItem::itemid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_AddItem.itemid)
  return _internal_itemid();
}
inline void S_AddItem::_internal_set_itemid(uint32_t value) {
  
  _impl_.itemid_ = value;
}
inline void S_AddItem::set_itemid(uint32_t value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_AddItem.itemid)
}

// uint32 itemCounts = 3;
inline void S_AddItem::clear_itemcounts() {
  _impl_.itemcounts_ = 0u;
}
inline uint32_t S_AddItem::_internal_itemcounts() const {
  return _impl_.itemcounts_;
}
inline uint32_t S_AddItem::itemcounts() const {
  // @@protoc_insertion_point(field_get:Protocol.S_AddItem.itemCounts)
  return _internal_itemcounts();
}
inline void S_AddItem::_internal_set_itemcounts(uint32_t value) {
  
  _impl_.itemcounts_ = value;
}
inline void S_AddItem::set_itemcounts(uint32_t value) {
  _internal_set_itemcounts(value);
  // @@protoc_insertion_point(field_set:Protocol.S_AddItem.itemCounts)
}

// -------------------------------------------------------------------

// S_EquipItem

// uint64 objectId = 1;
inline void S_EquipItem::clear_objectid() {
  _impl_.objectid_ = uint64_t{0u};
}
inline uint64_t S_EquipItem::_internal_objectid() const {
  return _impl_.objectid_;
}
inline uint64_t S_EquipItem::objectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_EquipItem.objectId)
  return _internal_objectid();
}
inline void S_EquipItem::_internal_set_objectid(uint64_t value) {
  
  _impl_.objectid_ = value;
}
inline void S_EquipItem::set_objectid(uint64_t value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_EquipItem.objectId)
}

// uint32 itemid = 2;
inline void S_EquipItem::clear_itemid() {
  _impl_.itemid_ = 0u;
}
inline uint32_t S_EquipItem::_internal_itemid() const {
  return _impl_.itemid_;
}
inline uint32_t S_EquipItem::itemid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_EquipItem.itemid)
  return _internal_itemid();
}
inline void S_EquipItem::_internal_set_itemid(uint32_t value) {
  
  _impl_.itemid_ = value;
}
inline void S_EquipItem::set_itemid(uint32_t value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_EquipItem.itemid)
}

// bool equip = 3;
inline void S_EquipItem::clear_equip() {
  _impl_.equip_ = false;
}
inline bool S_EquipItem::_internal_equip() const {
  return _impl_.equip_;
}
inline bool S_EquipItem::equip() const {
  // @@protoc_insertion_point(field_get:Protocol.S_EquipItem.equip)
  return _internal_equip();
}
inline void S_EquipItem::_internal_set_equip(bool value) {
  
  _impl_.equip_ = value;
}
inline void S_EquipItem::set_equip(bool value) {
  _internal_set_equip(value);
  // @@protoc_insertion_point(field_set:Protocol.S_EquipItem.equip)
}

// -------------------------------------------------------------------

// S_ItemDrop

// .Protocol.ItemInfo itemInfo = 1;
inline bool S_ItemDrop::_internal_has_iteminfo() const {
  return this != internal_default_instance() && _impl_.iteminfo_ != nullptr;
}
inline bool S_ItemDrop::has_iteminfo() const {
  return _internal_has_iteminfo();
}
inline const ::Protocol::ItemInfo& S_ItemDrop::_internal_iteminfo() const {
  const ::Protocol::ItemInfo* p = _impl_.iteminfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ItemInfo&>(
      ::Protocol::_ItemInfo_default_instance_);
}
inline const ::Protocol::ItemInfo& S_ItemDrop::iteminfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ItemDrop.itemInfo)
  return _internal_iteminfo();
}
inline void S_ItemDrop::unsafe_arena_set_allocated_iteminfo(
    ::Protocol::ItemInfo* iteminfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.iteminfo_);
  }
  _impl_.iteminfo_ = iteminfo;
  if (iteminfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ItemDrop.itemInfo)
}
inline ::Protocol::ItemInfo* S_ItemDrop::release_iteminfo() {
  
  ::Protocol::ItemInfo* temp = _impl_.iteminfo_;
  _impl_.iteminfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ItemInfo* S_ItemDrop::unsafe_arena_release_iteminfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_ItemDrop.itemInfo)
  
  ::Protocol::ItemInfo* temp = _impl_.iteminfo_;
  _impl_.iteminfo_ = nullptr;
  return temp;
}
inline ::Protocol::ItemInfo* S_ItemDrop::_internal_mutable_iteminfo() {
  
  if (_impl_.iteminfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ItemInfo>(GetArenaForAllocation());
    _impl_.iteminfo_ = p;
  }
  return _impl_.iteminfo_;
}
inline ::Protocol::ItemInfo* S_ItemDrop::mutable_iteminfo() {
  ::Protocol::ItemInfo* _msg = _internal_mutable_iteminfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ItemDrop.itemInfo)
  return _msg;
}
inline void S_ItemDrop::set_allocated_iteminfo(::Protocol::ItemInfo* iteminfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.iteminfo_);
  }
  if (iteminfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iteminfo));
    if (message_arena != submessage_arena) {
      iteminfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iteminfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.iteminfo_ = iteminfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ItemDrop.itemInfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
